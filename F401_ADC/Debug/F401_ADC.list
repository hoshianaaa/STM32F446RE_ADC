
F401_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800138c  0800138c  0001138c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080013a4  080013a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080013ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000006c  2000000c  080013b8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000078  080013b8  00020078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000054ec  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012e4  00000000  00000000  00025528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015a1  00000000  00000000  0002680c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000420  00000000  00000000  00027db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000538  00000000  00000000  000281d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000021ce  00000000  00000000  00028708  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001bb1  00000000  00000000  0002a8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002c487  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000009d8  00000000  00000000  0002c504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001374 	.word	0x08001374

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001374 	.word	0x08001374

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <HAL_InitTick+0x3c>)
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x40>)
{
 80004ea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ec:	7818      	ldrb	r0, [r3, #0]
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f6:	6810      	ldr	r0, [r2, #0]
 80004f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004fc:	f000 fa96 	bl	8000a2c <HAL_SYSTICK_Config>
 8000500:	4604      	mov	r4, r0
 8000502:	b958      	cbnz	r0, 800051c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000504:	2d0f      	cmp	r5, #15
 8000506:	d809      	bhi.n	800051c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000508:	4602      	mov	r2, r0
 800050a:	4629      	mov	r1, r5
 800050c:	f04f 30ff 	mov.w	r0, #4294967295
 8000510:	f000 fa58 	bl	80009c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_InitTick+0x44>)
 8000516:	4620      	mov	r0, r4
 8000518:	601d      	str	r5, [r3, #0]
 800051a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800051c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
 8000520:	20000008 	.word	0x20000008
 8000524:	20000000 	.word	0x20000000
 8000528:	20000004 	.word	0x20000004

0800052c <HAL_Init>:
{
 800052c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <HAL_Init+0x30>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000536:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000546:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fa29 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054e:	2000      	movs	r0, #0
 8000550:	f7ff ffc8 	bl	80004e4 <HAL_InitTick>
  HAL_MspInit();
 8000554:	f000 fe3a 	bl	80011cc <HAL_MspInit>
}
 8000558:	2000      	movs	r0, #0
 800055a:	bd08      	pop	{r3, pc}
 800055c:	40023c00 	.word	0x40023c00

08000560 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000560:	4a03      	ldr	r2, [pc, #12]	; (8000570 <HAL_IncTick+0x10>)
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <HAL_IncTick+0x14>)
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	440b      	add	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000578:	4b01      	ldr	r3, [pc, #4]	; (8000580 <HAL_GetTick+0x8>)
 800057a:	6818      	ldr	r0, [r3, #0]
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028

08000584 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000584:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000586:	4604      	mov	r4, r0
 8000588:	2800      	cmp	r0, #0
 800058a:	f000 809b 	beq.w	80006c4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800058e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000590:	b925      	cbnz	r5, 800059c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000592:	f000 fe37 	bl	8001204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000596:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000598:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800059c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059e:	06db      	lsls	r3, r3, #27
 80005a0:	f100 808e 	bmi.w	80006c0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005aa:	f023 0302 	bic.w	r3, r3, #2
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005b4:	4b44      	ldr	r3, [pc, #272]	; (80006c8 <HAL_ADC_Init+0x144>)
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005bc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	6861      	ldr	r1, [r4, #4]
 80005c2:	430a      	orrs	r2, r1
 80005c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005da:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005dc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005de:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	430a      	orrs	r2, r1
 80005e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005ec:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005fa:	4934      	ldr	r1, [pc, #208]	; (80006cc <HAL_ADC_Init+0x148>)
 80005fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005fe:	428a      	cmp	r2, r1
 8000600:	d052      	beq.n	80006a8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000608:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	430a      	orrs	r2, r1
 800060e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000610:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000612:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800061e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000620:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000622:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000624:	f022 0202 	bic.w	r2, r2, #2
 8000628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000632:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000636:	2a00      	cmp	r2, #0
 8000638:	d03e      	beq.n	80006b8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800063c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800064a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	3901      	subs	r1, #1
 8000650:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000654:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000658:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000662:	3901      	subs	r1, #1
 8000664:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800066a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800066c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000676:	689a      	ldr	r2, [r3, #8]
 8000678:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800067c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800067e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000680:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000688:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800068c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000690:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000692:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000696:	f023 0303 	bic.w	r3, r3, #3
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006a0:	2300      	movs	r3, #0
 80006a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006a6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006b6:	e7b2      	b.n	800061e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006b8:	685a      	ldr	r2, [r3, #4]
 80006ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006be:	e7c9      	b.n	8000654 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
 80006c2:	e7ed      	b.n	80006a0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
}
 80006c6:	bd38      	pop	{r3, r4, r5, pc}
 80006c8:	40012300 	.word	0x40012300
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <HAL_ADC_Start>:
{
 80006d0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d04e      	beq.n	800077c <HAL_ADC_Start+0xac>
 80006de:	2301      	movs	r3, #1
 80006e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e4:	6803      	ldr	r3, [r0, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	07d1      	lsls	r1, r2, #31
 80006ea:	d505      	bpl.n	80006f8 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	07d2      	lsls	r2, r2, #31
 80006f0:	d414      	bmi.n	800071c <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006f2:	2000      	movs	r0, #0
}
 80006f4:	b002      	add	sp, #8
 80006f6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006f8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006fa:	4921      	ldr	r1, [pc, #132]	; (8000780 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80006fc:	f042 0201 	orr.w	r2, r2, #1
 8000700:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000702:	4a20      	ldr	r2, [pc, #128]	; (8000784 <HAL_ADC_Start+0xb4>)
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	fbb2 f2f1 	udiv	r2, r2, r1
 800070a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800070e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000710:	9a01      	ldr	r2, [sp, #4]
 8000712:	2a00      	cmp	r2, #0
 8000714:	d0ea      	beq.n	80006ec <HAL_ADC_Start+0x1c>
      counter--;
 8000716:	9a01      	ldr	r2, [sp, #4]
 8000718:	3a01      	subs	r2, #1
 800071a:	e7f8      	b.n	800070e <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800071c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800071e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000722:	f022 0201 	bic.w	r2, r2, #1
 8000726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800072a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000730:	bf41      	itttt	mi
 8000732:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000734:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000738:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800073c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800073e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000744:	bf1c      	itt	ne
 8000746:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000748:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800074c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800074e:	2200      	movs	r2, #0
 8000750:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000754:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000758:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <HAL_ADC_Start+0xb8>)
 800075c:	6852      	ldr	r2, [r2, #4]
 800075e:	06d2      	lsls	r2, r2, #27
 8000760:	d108      	bne.n	8000774 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000762:	6898      	ldr	r0, [r3, #8]
 8000764:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000768:	d1c3      	bne.n	80006f2 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800076a:	689a      	ldr	r2, [r3, #8]
 800076c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	e7bf      	b.n	80006f4 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000774:	4a05      	ldr	r2, [pc, #20]	; (800078c <HAL_ADC_Start+0xbc>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d1bb      	bne.n	80006f2 <HAL_ADC_Start+0x22>
 800077a:	e7f2      	b.n	8000762 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 800077c:	2002      	movs	r0, #2
 800077e:	e7b9      	b.n	80006f4 <HAL_ADC_Start+0x24>
 8000780:	000f4240 	.word	0x000f4240
 8000784:	20000008 	.word	0x20000008
 8000788:	40012300 	.word	0x40012300
 800078c:	40012000 	.word	0x40012000

08000790 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000790:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000794:	2b01      	cmp	r3, #1
 8000796:	d017      	beq.n	80007c8 <HAL_ADC_Stop+0x38>
 8000798:	2301      	movs	r3, #1
 800079a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800079e:	6803      	ldr	r3, [r0, #0]
 80007a0:	689a      	ldr	r2, [r3, #8]
 80007a2:	f022 0201 	bic.w	r2, r2, #1
 80007a6:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	07db      	lsls	r3, r3, #31
 80007ac:	d407      	bmi.n	80007be <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 80007ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80007be:	2300      	movs	r3, #0
 80007c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007c4:	4618      	mov	r0, r3
 80007c6:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80007c8:	2002      	movs	r0, #2
}
 80007ca:	4770      	bx	lr

080007cc <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007cc:	6803      	ldr	r3, [r0, #0]
 80007ce:	689a      	ldr	r2, [r3, #8]
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007d2:	0556      	lsls	r6, r2, #21
{
 80007d4:	4604      	mov	r4, r0
 80007d6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007d8:	d50b      	bpl.n	80007f2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007da:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007dc:	05d8      	lsls	r0, r3, #23
 80007de:	d508      	bpl.n	80007f2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80007e8:	2300      	movs	r3, #0
 80007ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80007ee:	2001      	movs	r0, #1
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80007f2:	f7ff fec1 	bl	8000578 <HAL_GetTick>
 80007f6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80007f8:	6823      	ldr	r3, [r4, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	0792      	lsls	r2, r2, #30
 80007fe:	d50c      	bpl.n	800081a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000800:	f06f 0212 	mvn.w	r2, #18
 8000804:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000806:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800080c:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000814:	d013      	beq.n	800083e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000816:	2000      	movs	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800081a:	1c69      	adds	r1, r5, #1
 800081c:	d0ed      	beq.n	80007fa <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800081e:	b945      	cbnz	r5, 8000832 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000828:	2300      	movs	r3, #0
 800082a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800082e:	2003      	movs	r0, #3
 8000830:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000832:	f7ff fea1 	bl	8000578 <HAL_GetTick>
 8000836:	1b80      	subs	r0, r0, r6
 8000838:	4285      	cmp	r5, r0
 800083a:	d2dd      	bcs.n	80007f8 <HAL_ADC_PollForConversion+0x2c>
 800083c:	e7f0      	b.n	8000820 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800083e:	7e22      	ldrb	r2, [r4, #24]
 8000840:	2a00      	cmp	r2, #0
 8000842:	d1e8      	bne.n	8000816 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000846:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800084a:	d002      	beq.n	8000852 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800084c:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800084e:	055b      	lsls	r3, r3, #21
 8000850:	d4e1      	bmi.n	8000816 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000858:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800085a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800085c:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000860:	d1d9      	bne.n	8000816 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6423      	str	r3, [r4, #64]	; 0x40
}
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800086c:	6803      	ldr	r3, [r0, #0]
 800086e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000870:	4770      	bx	lr
	...

08000874 <HAL_ADC_ConfigChannel>:
{
 8000874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000876:	2300      	movs	r3, #0
 8000878:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800087a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800087e:	2b01      	cmp	r3, #1
 8000880:	f000 8083 	beq.w	800098a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000884:	680d      	ldr	r5, [r1, #0]
 8000886:	6804      	ldr	r4, [r0, #0]
 8000888:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800088a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800088c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800088e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000892:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000894:	d92a      	bls.n	80008ec <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000896:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800089a:	68e7      	ldr	r7, [r4, #12]
 800089c:	3b1e      	subs	r3, #30
 800089e:	f04f 0e07 	mov.w	lr, #7
 80008a2:	fa0e fe03 	lsl.w	lr, lr, r3
 80008a6:	ea27 070e 	bic.w	r7, r7, lr
 80008aa:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ac:	68e7      	ldr	r7, [r4, #12]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	433b      	orrs	r3, r7
 80008b4:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008b6:	684a      	ldr	r2, [r1, #4]
 80008b8:	2a06      	cmp	r2, #6
 80008ba:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008be:	d825      	bhi.n	800090c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008c0:	4413      	add	r3, r2
 80008c2:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008c4:	1f59      	subs	r1, r3, #5
 80008c6:	231f      	movs	r3, #31
 80008c8:	408b      	lsls	r3, r1
 80008ca:	ea27 0303 	bic.w	r3, r7, r3
 80008ce:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008d2:	fa06 f101 	lsl.w	r1, r6, r1
 80008d6:	4311      	orrs	r1, r2
 80008d8:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <HAL_ADC_ConfigChannel+0x11c>)
 80008dc:	429c      	cmp	r4, r3
 80008de:	d034      	beq.n	800094a <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80008e0:	2300      	movs	r3, #0
 80008e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008e6:	4618      	mov	r0, r3
}
 80008e8:	b003      	add	sp, #12
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008ec:	6927      	ldr	r7, [r4, #16]
 80008ee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008f2:	f04f 0e07 	mov.w	lr, #7
 80008f6:	fa0e fe03 	lsl.w	lr, lr, r3
 80008fa:	ea27 070e 	bic.w	r7, r7, lr
 80008fe:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000900:	6927      	ldr	r7, [r4, #16]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	433b      	orrs	r3, r7
 8000908:	6123      	str	r3, [r4, #16]
 800090a:	e7d4      	b.n	80008b6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800090c:	2a0c      	cmp	r2, #12
 800090e:	d80e      	bhi.n	800092e <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000910:	4413      	add	r3, r2
 8000912:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000914:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000918:	231f      	movs	r3, #31
 800091a:	4093      	lsls	r3, r2
 800091c:	ea21 0303 	bic.w	r3, r1, r3
 8000920:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000922:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000924:	fa06 f202 	lsl.w	r2, r6, r2
 8000928:	431a      	orrs	r2, r3
 800092a:	6322      	str	r2, [r4, #48]	; 0x30
 800092c:	e7d5      	b.n	80008da <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800092e:	4413      	add	r3, r2
 8000930:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000932:	3b41      	subs	r3, #65	; 0x41
 8000934:	221f      	movs	r2, #31
 8000936:	409a      	lsls	r2, r3
 8000938:	ea21 0202 	bic.w	r2, r1, r2
 800093c:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800093e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000940:	fa06 f103 	lsl.w	r1, r6, r3
 8000944:	4311      	orrs	r1, r2
 8000946:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000948:	e7c7      	b.n	80008da <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800094a:	2d12      	cmp	r5, #18
 800094c:	d104      	bne.n	8000958 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <HAL_ADC_ConfigChannel+0x120>)
 8000950:	6853      	ldr	r3, [r2, #4]
 8000952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000956:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000958:	f1a5 0310 	sub.w	r3, r5, #16
 800095c:	2b01      	cmp	r3, #1
 800095e:	d8bf      	bhi.n	80008e0 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <HAL_ADC_ConfigChannel+0x120>)
 8000962:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000964:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800096a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800096c:	d1b8      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_ADC_ConfigChannel+0x124>)
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_ADC_ConfigChannel+0x128>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	fbb3 f2f2 	udiv	r2, r3, r2
 8000978:	230a      	movs	r3, #10
 800097a:	4353      	muls	r3, r2
        counter--;
 800097c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0ad      	beq.n	80008e0 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	e7f8      	b.n	800097c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800098a:	2002      	movs	r0, #2
 800098c:	e7ac      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x74>
 800098e:	bf00      	nop
 8000990:	40012000 	.word	0x40012000
 8000994:	40012300 	.word	0x40012300
 8000998:	20000008 	.word	0x20000008
 800099c:	000f4240 	.word	0x000f4240

080009a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009a8:	041b      	lsls	r3, r3, #16
 80009aa:	0c1b      	lsrs	r3, r3, #16
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b0:	0200      	lsls	r0, r0, #8
 80009b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009bc:	60d3      	str	r3, [r2, #12]
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009c6:	b530      	push	{r4, r5, lr}
 80009c8:	68dc      	ldr	r4, [r3, #12]
 80009ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	bf28      	it	cs
 80009d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 0501 	mov.w	r5, #1
 80009e0:	fa05 f303 	lsl.w	r3, r5, r3
 80009e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e8:	bf8c      	ite	hi
 80009ea:	3c03      	subhi	r4, #3
 80009ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ee:	4019      	ands	r1, r3
 80009f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f2:	fa05 f404 	lsl.w	r4, r5, r4
 80009f6:	3c01      	subs	r4, #1
 80009f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80009fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	ea42 0201 	orr.w	r2, r2, r1
 8000a00:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	bfad      	iteet	ge
 8000a06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	f000 000f 	andlt.w	r0, r0, #15
 8000a0e:	4b06      	ldrlt	r3, [pc, #24]	; (8000a28 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	bfb5      	itete	lt
 8000a16:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	e000ed14 	.word	0xe000ed14

08000a2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	3801      	subs	r0, #1
 8000a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a32:	d20a      	bcs.n	8000a4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	21f0      	movs	r1, #240	; 0xf0
 8000a3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e010 	.word	0xe000e010
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a5c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000c00 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a64:	4a64      	ldr	r2, [pc, #400]	; (8000bf8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000a68:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a6c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a70:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a74:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000a78:	42b7      	cmp	r7, r6
 8000a7a:	f040 80ad 	bne.w	8000bd8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7e:	684c      	ldr	r4, [r1, #4]
 8000a80:	f024 0a10 	bic.w	sl, r4, #16
 8000a84:	f1ba 0f02 	cmp.w	sl, #2
 8000a88:	d116      	bne.n	8000ab8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000a8a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a8e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a92:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a96:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a9a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a9e:	f04f 0e0f 	mov.w	lr, #15
 8000aa2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000aa6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000aaa:	690d      	ldr	r5, [r1, #16]
 8000aac:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ab0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000ab4:	f8cc 5020 	str.w	r5, [ip, #32]
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000abc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000abe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ac2:	fa05 f50c 	lsl.w	r5, r5, ip
 8000ac6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000acc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000ae2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae6:	d815      	bhi.n	8000b14 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000ae8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aec:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af0:	68cd      	ldr	r5, [r1, #12]
 8000af2:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000af6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000afa:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000afe:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b02:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b06:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000b0a:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b0e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000b12:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b14:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b16:	9d00      	ldr	r5, [sp, #0]
 8000b18:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1a:	688f      	ldr	r7, [r1, #8]
 8000b1c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000b20:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b22:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b24:	00e5      	lsls	r5, r4, #3
 8000b26:	d557      	bpl.n	8000bd8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	f04f 0b00 	mov.w	fp, #0
 8000b2c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b30:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b34:	4d31      	ldr	r5, [pc, #196]	; (8000bfc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b3a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b3e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b42:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b46:	9703      	str	r7, [sp, #12]
 8000b48:	9f03      	ldr	r7, [sp, #12]
 8000b4a:	f023 0703 	bic.w	r7, r3, #3
 8000b4e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b52:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b56:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b5a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b5e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b62:	f04f 0e0f 	mov.w	lr, #15
 8000b66:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b6a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b6c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b70:	d039      	beq.n	8000be6 <HAL_GPIO_Init+0x18e>
 8000b72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b76:	42a8      	cmp	r0, r5
 8000b78:	d037      	beq.n	8000bea <HAL_GPIO_Init+0x192>
 8000b7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b7e:	42a8      	cmp	r0, r5
 8000b80:	d035      	beq.n	8000bee <HAL_GPIO_Init+0x196>
 8000b82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b86:	42a8      	cmp	r0, r5
 8000b88:	d033      	beq.n	8000bf2 <HAL_GPIO_Init+0x19a>
 8000b8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b8e:	42a8      	cmp	r0, r5
 8000b90:	bf14      	ite	ne
 8000b92:	2507      	movne	r5, #7
 8000b94:	2504      	moveq	r5, #4
 8000b96:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b9a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b9e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000ba0:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ba2:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ba8:	bf0c      	ite	eq
 8000baa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bac:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000bae:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000bb0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	bf0c      	ite	eq
 8000bb8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bba:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000bbc:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	bf0c      	ite	eq
 8000bc6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000bc8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000bca:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000bcc:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bce:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000bd0:	bf54      	ite	pl
 8000bd2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000bd4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000bd6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd8:	3301      	adds	r3, #1
 8000bda:	2b10      	cmp	r3, #16
 8000bdc:	f47f af47 	bne.w	8000a6e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000be0:	b005      	add	sp, #20
 8000be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be6:	465d      	mov	r5, fp
 8000be8:	e7d5      	b.n	8000b96 <HAL_GPIO_Init+0x13e>
 8000bea:	2501      	movs	r5, #1
 8000bec:	e7d3      	b.n	8000b96 <HAL_GPIO_Init+0x13e>
 8000bee:	2502      	movs	r5, #2
 8000bf0:	e7d1      	b.n	8000b96 <HAL_GPIO_Init+0x13e>
 8000bf2:	2503      	movs	r5, #3
 8000bf4:	e7cf      	b.n	8000b96 <HAL_GPIO_Init+0x13e>
 8000bf6:	bf00      	nop
 8000bf8:	40013c00 	.word	0x40013c00
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c08:	4604      	mov	r4, r0
 8000c0a:	b918      	cbnz	r0, 8000c14 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000c0e:	b002      	add	sp, #8
 8000c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c14:	6803      	ldr	r3, [r0, #0]
 8000c16:	07dd      	lsls	r5, r3, #31
 8000c18:	d410      	bmi.n	8000c3c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	0798      	lsls	r0, r3, #30
 8000c1e:	d458      	bmi.n	8000cd2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	071a      	lsls	r2, r3, #28
 8000c24:	f100 809a 	bmi.w	8000d5c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c28:	6823      	ldr	r3, [r4, #0]
 8000c2a:	075b      	lsls	r3, r3, #29
 8000c2c:	f100 80b8 	bmi.w	8000da0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c30:	69a2      	ldr	r2, [r4, #24]
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	f040 8119 	bne.w	8000e6a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e7e8      	b.n	8000c0e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c3c:	4ba6      	ldr	r3, [pc, #664]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	f002 020c 	and.w	r2, r2, #12
 8000c44:	2a04      	cmp	r2, #4
 8000c46:	d007      	beq.n	8000c58 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c4e:	2a08      	cmp	r2, #8
 8000c50:	d10a      	bne.n	8000c68 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	0259      	lsls	r1, r3, #9
 8000c56:	d507      	bpl.n	8000c68 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	4b9f      	ldr	r3, [pc, #636]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	039a      	lsls	r2, r3, #14
 8000c5e:	d5dc      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x16>
 8000c60:	6863      	ldr	r3, [r4, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1d9      	bne.n	8000c1a <HAL_RCC_OscConfig+0x16>
 8000c66:	e7d1      	b.n	8000c0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	4d9b      	ldr	r5, [pc, #620]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d111      	bne.n	8000c96 <HAL_RCC_OscConfig+0x92>
 8000c72:	682b      	ldr	r3, [r5, #0]
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc7d 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4d96      	ldr	r5, [pc, #600]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	039b      	lsls	r3, r3, #14
 8000c86:	d4c8      	bmi.n	8000c1a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fc76 	bl	8000578 <HAL_GetTick>
 8000c8c:	1b80      	subs	r0, r0, r6
 8000c8e:	2864      	cmp	r0, #100	; 0x64
 8000c90:	d9f7      	bls.n	8000c82 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e7bb      	b.n	8000c0e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9a:	d104      	bne.n	8000ca6 <HAL_RCC_OscConfig+0xa2>
 8000c9c:	682b      	ldr	r3, [r5, #0]
 8000c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca2:	602b      	str	r3, [r5, #0]
 8000ca4:	e7e5      	b.n	8000c72 <HAL_RCC_OscConfig+0x6e>
 8000ca6:	682a      	ldr	r2, [r5, #0]
 8000ca8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000cac:	602a      	str	r2, [r5, #0]
 8000cae:	682a      	ldr	r2, [r5, #0]
 8000cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cb4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1df      	bne.n	8000c7a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000cba:	f7ff fc5d 	bl	8000578 <HAL_GetTick>
 8000cbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	039f      	lsls	r7, r3, #14
 8000cc4:	d5a9      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fc57 	bl	8000578 <HAL_GetTick>
 8000cca:	1b80      	subs	r0, r0, r6
 8000ccc:	2864      	cmp	r0, #100	; 0x64
 8000cce:	d9f7      	bls.n	8000cc0 <HAL_RCC_OscConfig+0xbc>
 8000cd0:	e7df      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cd2:	4b81      	ldr	r3, [pc, #516]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	f012 0f0c 	tst.w	r2, #12
 8000cda:	d007      	beq.n	8000cec <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce2:	2a08      	cmp	r2, #8
 8000ce4:	d111      	bne.n	8000d0a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	025e      	lsls	r6, r3, #9
 8000cea:	d40e      	bmi.n	8000d0a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cec:	4b7a      	ldr	r3, [pc, #488]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	0795      	lsls	r5, r2, #30
 8000cf2:	d502      	bpl.n	8000cfa <HAL_RCC_OscConfig+0xf6>
 8000cf4:	68e2      	ldr	r2, [r4, #12]
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d188      	bne.n	8000c0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	6921      	ldr	r1, [r4, #16]
 8000cfe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d02:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d08:	e78a      	b.n	8000c20 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d0a:	68e2      	ldr	r2, [r4, #12]
 8000d0c:	4b73      	ldr	r3, [pc, #460]	; (8000edc <HAL_RCC_OscConfig+0x2d8>)
 8000d0e:	b1b2      	cbz	r2, 8000d3e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc30 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	4d6f      	ldr	r5, [pc, #444]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	0798      	lsls	r0, r3, #30
 8000d20:	d507      	bpl.n	8000d32 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	6922      	ldr	r2, [r4, #16]
 8000d26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d2e:	602b      	str	r3, [r5, #0]
 8000d30:	e776      	b.n	8000c20 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc21 	bl	8000578 <HAL_GetTick>
 8000d36:	1b80      	subs	r0, r0, r6
 8000d38:	2802      	cmp	r0, #2
 8000d3a:	d9ef      	bls.n	8000d1c <HAL_RCC_OscConfig+0x118>
 8000d3c:	e7a9      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000d3e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc1a 	bl	8000578 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d44:	4d64      	ldr	r5, [pc, #400]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	0799      	lsls	r1, r3, #30
 8000d4c:	f57f af68 	bpl.w	8000c20 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc12 	bl	8000578 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9f6      	bls.n	8000d48 <HAL_RCC_OscConfig+0x144>
 8000d5a:	e79a      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d5c:	6962      	ldr	r2, [r4, #20]
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <HAL_RCC_OscConfig+0x2dc>)
 8000d60:	b17a      	cbz	r2, 8000d82 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d66:	f7ff fc07 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	4d5b      	ldr	r5, [pc, #364]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d6c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d70:	079f      	lsls	r7, r3, #30
 8000d72:	f53f af59 	bmi.w	8000c28 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fbff 	bl	8000578 <HAL_GetTick>
 8000d7a:	1b80      	subs	r0, r0, r6
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d9f6      	bls.n	8000d6e <HAL_RCC_OscConfig+0x16a>
 8000d80:	e787      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000d82:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d84:	f7ff fbf8 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d88:	4d53      	ldr	r5, [pc, #332]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d8e:	0798      	lsls	r0, r3, #30
 8000d90:	f57f af4a 	bpl.w	8000c28 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d94:	f7ff fbf0 	bl	8000578 <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9f6      	bls.n	8000d8c <HAL_RCC_OscConfig+0x188>
 8000d9e:	e778      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000da8:	d128      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	9201      	str	r2, [sp, #4]
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dbe:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	4d48      	ldr	r5, [pc, #288]	; (8000ee4 <HAL_RCC_OscConfig+0x2e0>)
 8000dc2:	682b      	ldr	r3, [r5, #0]
 8000dc4:	05d9      	lsls	r1, r3, #23
 8000dc6:	d51b      	bpl.n	8000e00 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc8:	68a3      	ldr	r3, [r4, #8]
 8000dca:	4d43      	ldr	r5, [pc, #268]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d127      	bne.n	8000e20 <HAL_RCC_OscConfig+0x21c>
 8000dd0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fbce 	bl	8000578 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ddc:	4d3e      	ldr	r5, [pc, #248]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000dde:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000de6:	079b      	lsls	r3, r3, #30
 8000de8:	d539      	bpl.n	8000e5e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	f43f af20 	beq.w	8000c30 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df0:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000df2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	e719      	b.n	8000c30 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	e7df      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e08:	f7ff fbb6 	bl	8000578 <HAL_GetTick>
 8000e0c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	05da      	lsls	r2, r3, #23
 8000e12:	d4d9      	bmi.n	8000dc8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e14:	f7ff fbb0 	bl	8000578 <HAL_GetTick>
 8000e18:	1bc0      	subs	r0, r0, r7
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f7      	bls.n	8000e0e <HAL_RCC_OscConfig+0x20a>
 8000e1e:	e738      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d104      	bne.n	8000e2e <HAL_RCC_OscConfig+0x22a>
 8000e24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	672b      	str	r3, [r5, #112]	; 0x70
 8000e2c:	e7d0      	b.n	8000dd0 <HAL_RCC_OscConfig+0x1cc>
 8000e2e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	672a      	str	r2, [r5, #112]	; 0x70
 8000e36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e38:	f022 0204 	bic.w	r2, r2, #4
 8000e3c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1ca      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000e42:	f7ff fb99 	bl	8000578 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e46:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e4a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e4e:	0798      	lsls	r0, r3, #30
 8000e50:	d5cb      	bpl.n	8000dea <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff fb91 	bl	8000578 <HAL_GetTick>
 8000e56:	1bc0      	subs	r0, r0, r7
 8000e58:	4540      	cmp	r0, r8
 8000e5a:	d9f7      	bls.n	8000e4c <HAL_RCC_OscConfig+0x248>
 8000e5c:	e719      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fb8b 	bl	8000578 <HAL_GetTick>
 8000e62:	1bc0      	subs	r0, r0, r7
 8000e64:	4540      	cmp	r0, r8
 8000e66:	d9bd      	bls.n	8000de4 <HAL_RCC_OscConfig+0x1e0>
 8000e68:	e713      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e6a:	4d1b      	ldr	r5, [pc, #108]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
 8000e6c:	68ab      	ldr	r3, [r5, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	f43f aeca 	beq.w	8000c0c <HAL_RCC_OscConfig+0x8>
 8000e78:	4e1b      	ldr	r6, [pc, #108]	; (8000ee8 <HAL_RCC_OscConfig+0x2e4>)
 8000e7a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e7c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e7e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e80:	d134      	bne.n	8000eec <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb79 	bl	8000578 <HAL_GetTick>
 8000e86:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	0199      	lsls	r1, r3, #6
 8000e8c:	d41e      	bmi.n	8000ecc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e8e:	6a22      	ldr	r2, [r4, #32]
 8000e90:	69e3      	ldr	r3, [r4, #28]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e96:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ea0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea2:	4c0d      	ldr	r4, [pc, #52]	; (8000ed8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ea4:	0852      	lsrs	r2, r2, #1
 8000ea6:	3a01      	subs	r2, #1
 8000ea8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eae:	2301      	movs	r3, #1
 8000eb0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fb61 	bl	8000578 <HAL_GetTick>
 8000eb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	019a      	lsls	r2, r3, #6
 8000ebc:	f53f aebc 	bmi.w	8000c38 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec0:	f7ff fb5a 	bl	8000578 <HAL_GetTick>
 8000ec4:	1b40      	subs	r0, r0, r5
 8000ec6:	2802      	cmp	r0, #2
 8000ec8:	d9f6      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x2b4>
 8000eca:	e6e2      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ecc:	f7ff fb54 	bl	8000578 <HAL_GetTick>
 8000ed0:	1bc0      	subs	r0, r0, r7
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9d8      	bls.n	8000e88 <HAL_RCC_OscConfig+0x284>
 8000ed6:	e6dc      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	42470000 	.word	0x42470000
 8000ee0:	42470e80 	.word	0x42470e80
 8000ee4:	40007000 	.word	0x40007000
 8000ee8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000eec:	f7ff fb44 	bl	8000578 <HAL_GetTick>
 8000ef0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef2:	682b      	ldr	r3, [r5, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	f57f ae9f 	bpl.w	8000c38 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff fb3d 	bl	8000578 <HAL_GetTick>
 8000efe:	1b00      	subs	r0, r0, r4
 8000f00:	2802      	cmp	r0, #2
 8000f02:	d9f6      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2ee>
 8000f04:	e6c5      	b.n	8000c92 <HAL_RCC_OscConfig+0x8e>
 8000f06:	bf00      	nop

08000f08 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f08:	4913      	ldr	r1, [pc, #76]	; (8000f58 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000f0a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f0c:	688b      	ldr	r3, [r1, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d003      	beq.n	8000f1e <HAL_RCC_GetSysClockFreq+0x16>
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d003      	beq.n	8000f22 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f1c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000f1e:	4810      	ldr	r0, [pc, #64]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x58>)
 8000f20:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f24:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f26:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f28:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f2c:	bf14      	ite	ne
 8000f2e:	480c      	ldrne	r0, [pc, #48]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f30:	480a      	ldreq	r0, [pc, #40]	; (8000f5c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f32:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f36:	bf18      	it	ne
 8000f38:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f3e:	fba1 0100 	umull	r0, r1, r1, r0
 8000f42:	f7ff f947 	bl	80001d4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <HAL_RCC_GetSysClockFreq+0x50>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f4e:	3301      	adds	r3, #1
 8000f50:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f52:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f56:	bd08      	pop	{r3, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	00f42400 	.word	0x00f42400
 8000f60:	017d7840 	.word	0x017d7840

08000f64 <HAL_RCC_ClockConfig>:
{
 8000f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f68:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	b910      	cbnz	r0, 8000f74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
 8000f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f74:	4b44      	ldr	r3, [pc, #272]	; (8001088 <HAL_RCC_ClockConfig+0x124>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f002 020f 	and.w	r2, r2, #15
 8000f7c:	428a      	cmp	r2, r1
 8000f7e:	d328      	bcc.n	8000fd2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f80:	6821      	ldr	r1, [r4, #0]
 8000f82:	078f      	lsls	r7, r1, #30
 8000f84:	d42d      	bmi.n	8000fe2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f86:	07c8      	lsls	r0, r1, #31
 8000f88:	d440      	bmi.n	800100c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <HAL_RCC_ClockConfig+0x124>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f002 020f 	and.w	r2, r2, #15
 8000f92:	4295      	cmp	r5, r2
 8000f94:	d366      	bcc.n	8001064 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f96:	6822      	ldr	r2, [r4, #0]
 8000f98:	0751      	lsls	r1, r2, #29
 8000f9a:	d46c      	bmi.n	8001076 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f9c:	0713      	lsls	r3, r2, #28
 8000f9e:	d507      	bpl.n	8000fb0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fa0:	4a3a      	ldr	r2, [pc, #232]	; (800108c <HAL_RCC_ClockConfig+0x128>)
 8000fa2:	6921      	ldr	r1, [r4, #16]
 8000fa4:	6893      	ldr	r3, [r2, #8]
 8000fa6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000faa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000fae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fb0:	f7ff ffaa 	bl	8000f08 <HAL_RCC_GetSysClockFreq>
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_RCC_ClockConfig+0x128>)
 8000fb6:	4a36      	ldr	r2, [pc, #216]	; (8001090 <HAL_RCC_ClockConfig+0x12c>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	40d8      	lsrs	r0, r3
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_RCC_ClockConfig+0x130>)
 8000fc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff fa8c 	bl	80004e4 <HAL_InitTick>
  return HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 030f 	and.w	r3, r3, #15
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	d1c6      	bne.n	8000f6e <HAL_RCC_ClockConfig+0xa>
 8000fe0:	e7ce      	b.n	8000f80 <HAL_RCC_ClockConfig+0x1c>
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fe8:	bf1e      	ittt	ne
 8000fea:	689a      	ldrne	r2, [r3, #8]
 8000fec:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ff0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ff2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff4:	bf42      	ittt	mi
 8000ff6:	689a      	ldrmi	r2, [r3, #8]
 8000ff8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ffc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	68a0      	ldr	r0, [r4, #8]
 8001002:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001006:	4302      	orrs	r2, r0
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	e7bc      	b.n	8000f86 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100c:	6862      	ldr	r2, [r4, #4]
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_RCC_ClockConfig+0x128>)
 8001010:	2a01      	cmp	r2, #1
 8001012:	d11d      	bne.n	8001050 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	d0a8      	beq.n	8000f6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101c:	4e1b      	ldr	r6, [pc, #108]	; (800108c <HAL_RCC_ClockConfig+0x128>)
 800101e:	68b3      	ldr	r3, [r6, #8]
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	4313      	orrs	r3, r2
 8001026:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001028:	f7ff faa6 	bl	8000578 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001030:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	68b3      	ldr	r3, [r6, #8]
 8001034:	6862      	ldr	r2, [r4, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800103e:	d0a4      	beq.n	8000f8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff fa9a 	bl	8000578 <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4540      	cmp	r0, r8
 8001048:	d9f3      	bls.n	8001032 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
}
 800104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001050:	1e91      	subs	r1, r2, #2
 8001052:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001054:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001056:	d802      	bhi.n	800105e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001058:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800105c:	e7dd      	b.n	800101a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	f013 0f02 	tst.w	r3, #2
 8001062:	e7da      	b.n	800101a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001064:	b2ea      	uxtb	r2, r5
 8001066:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	429d      	cmp	r5, r3
 8001070:	f47f af7d 	bne.w	8000f6e <HAL_RCC_ClockConfig+0xa>
 8001074:	e78f      	b.n	8000f96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001076:	4905      	ldr	r1, [pc, #20]	; (800108c <HAL_RCC_ClockConfig+0x128>)
 8001078:	68e0      	ldr	r0, [r4, #12]
 800107a:	688b      	ldr	r3, [r1, #8]
 800107c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001080:	4303      	orrs	r3, r0
 8001082:	608b      	str	r3, [r1, #8]
 8001084:	e78a      	b.n	8000f9c <HAL_RCC_ClockConfig+0x38>
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00
 800108c:	40023800 	.word	0x40023800
 8001090:	0800138c 	.word	0x0800138c
 8001094:	20000008 	.word	0x20000008

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b530      	push	{r4, r5, lr}
 800109a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109c:	2230      	movs	r2, #48	; 0x30
 800109e:	2100      	movs	r1, #0
 80010a0:	a808      	add	r0, sp, #32
 80010a2:	f000 f95f 	bl	8001364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a6:	2100      	movs	r1, #0
 80010a8:	2214      	movs	r2, #20
 80010aa:	a803      	add	r0, sp, #12
 80010ac:	f000 f95a 	bl	8001364 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2500      	movs	r5, #0
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <SystemClock_Config+0x8c>)
 80010b4:	9501      	str	r5, [sp, #4]
 80010b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ca:	9502      	str	r5, [sp, #8]
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010da:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010ec:	2308      	movs	r3, #8
 80010ee:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010f0:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010f4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f7ff fd7f 	bl	8000c04 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001116:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111a:	f7ff ff23 	bl	8000f64 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800111e:	b015      	add	sp, #84	; 0x54
 8001120:	bd30      	pop	{r4, r5, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <main>:
{
 800112c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 800112e:	f7ff f9fd 	bl	800052c <HAL_Init>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2500      	movs	r5, #0
  SystemClock_Config();
 8001134:	f7ff ffb0 	bl	8001098 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <main+0x8c>)
 800113a:	9501      	str	r5, [sp, #4]
 800113c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 800113e:	4c1f      	ldr	r4, [pc, #124]	; (80011bc <main+0x90>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	631a      	str	r2, [r3, #48]	; 0x30
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0301 	and.w	r3, r3, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 800114c:	4629      	mov	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001150:	2210      	movs	r2, #16
 8001152:	a802      	add	r0, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	f000 f905 	bl	8001364 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <main+0x94>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115c:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001162:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.NbrOfConversion = 1;
 8001166:	2601      	movs	r6, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <main+0x98>)
  hadc1.Init.ScanConvMode = DISABLE;
 800116a:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800116c:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116e:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001170:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 1;
 800117e:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001182:	f7ff f9ff 	bl	8000584 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001186:	a902      	add	r1, sp, #8
 8001188:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800118a:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800118c:	9504      	str	r5, [sp, #16]
  sConfig.Rank = 1;
 800118e:	9603      	str	r6, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	f7ff fb70 	bl	8000874 <HAL_ADC_ConfigChannel>
	      analogValue = HAL_ADC_GetValue(&hadc1);
 8001194:	4d0c      	ldr	r5, [pc, #48]	; (80011c8 <main+0x9c>)
	  	HAL_ADC_Start(&hadc1);
 8001196:	4620      	mov	r0, r4
 8001198:	f7ff fa9a 	bl	80006d0 <HAL_ADC_Start>
	    if( HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK )
 800119c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fb13 	bl	80007cc <HAL_ADC_PollForConversion>
 80011a6:	b918      	cbnz	r0, 80011b0 <main+0x84>
	      analogValue = HAL_ADC_GetValue(&hadc1);
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fb5f 	bl	800086c <HAL_ADC_GetValue>
 80011ae:	6028      	str	r0, [r5, #0]
	    HAL_ADC_Stop(&hadc1);
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff faed 	bl	8000790 <HAL_ADC_Stop>
	  	HAL_ADC_Start(&hadc1);
 80011b6:	e7ee      	b.n	8001196 <main+0x6a>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	2000002c 	.word	0x2000002c
 80011c0:	40012000 	.word	0x40012000
 80011c4:	0f000001 	.word	0x0f000001
 80011c8:	20000074 	.word	0x20000074

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x34>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	9100      	str	r1, [sp, #0]
 80011d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011da:	645a      	str	r2, [r3, #68]	; 0x44
 80011dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e6:	9101      	str	r1, [sp, #4]
 80011e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	b002      	add	sp, #8
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001204:	b510      	push	{r4, lr}
 8001206:	4604      	mov	r4, r0
 8001208:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	2214      	movs	r2, #20
 800120c:	2100      	movs	r1, #0
 800120e:	a803      	add	r0, sp, #12
 8001210:	f000 f8a8 	bl	8001364 <memset>
  if(hadc->Instance==ADC1)
 8001214:	6822      	ldr	r2, [r4, #0]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_ADC_MspInit+0x5c>)
 8001218:	429a      	cmp	r2, r3
 800121a:	d11e      	bne.n	800125a <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001220:	2100      	movs	r1, #0
 8001222:	9101      	str	r1, [sp, #4]
 8001224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800122c:	645a      	str	r2, [r3, #68]	; 0x44
 800122e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001230:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001234:	9201      	str	r2, [sp, #4]
 8001236:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	9102      	str	r1, [sp, #8]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124c:	2301      	movs	r3, #1
 800124e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f7ff fbff 	bl	8000a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800125a:	b008      	add	sp, #32
 800125c:	bd10      	pop	{r4, pc}
 800125e:	bf00      	nop
 8001260:	40012000 	.word	0x40012000
 8001264:	40020000 	.word	0x40020000

08001268 <NMI_Handler>:
 8001268:	4770      	bx	lr

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	e7fe      	b.n	800126a <HardFault_Handler>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	e7fe      	b.n	800126c <MemManage_Handler>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	e7fe      	b.n	800126e <BusFault_Handler>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	e7fe      	b.n	8001270 <UsageFault_Handler>

08001272 <SVC_Handler>:
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f7ff b972 	b.w	8000560 <HAL_IncTick>

0800127c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	490f      	ldr	r1, [pc, #60]	; (80012bc <SystemInit+0x40>)
 800127e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <SystemInit+0x44>)
 800128c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800128e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001296:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800129e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <SystemInit+0x48>)
 80012a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012b0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012b6:	608b      	str	r3, [r1, #8]
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	24003010 	.word	0x24003010

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
  ldr  r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f2:	f7ff ffc3 	bl	800127c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f000 f811 	bl	800131c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff ff17 	bl	800112c <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001300:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001304:	080013ac 	.word	0x080013ac
  ldr  r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800130c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001310:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001314:	20000078 	.word	0x20000078

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <__libc_init_array>:
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	4e0d      	ldr	r6, [pc, #52]	; (8001354 <__libc_init_array+0x38>)
 8001320:	4c0d      	ldr	r4, [pc, #52]	; (8001358 <__libc_init_array+0x3c>)
 8001322:	1ba4      	subs	r4, r4, r6
 8001324:	10a4      	asrs	r4, r4, #2
 8001326:	2500      	movs	r5, #0
 8001328:	42a5      	cmp	r5, r4
 800132a:	d109      	bne.n	8001340 <__libc_init_array+0x24>
 800132c:	4e0b      	ldr	r6, [pc, #44]	; (800135c <__libc_init_array+0x40>)
 800132e:	4c0c      	ldr	r4, [pc, #48]	; (8001360 <__libc_init_array+0x44>)
 8001330:	f000 f820 	bl	8001374 <_init>
 8001334:	1ba4      	subs	r4, r4, r6
 8001336:	10a4      	asrs	r4, r4, #2
 8001338:	2500      	movs	r5, #0
 800133a:	42a5      	cmp	r5, r4
 800133c:	d105      	bne.n	800134a <__libc_init_array+0x2e>
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001344:	4798      	blx	r3
 8001346:	3501      	adds	r5, #1
 8001348:	e7ee      	b.n	8001328 <__libc_init_array+0xc>
 800134a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800134e:	4798      	blx	r3
 8001350:	3501      	adds	r5, #1
 8001352:	e7f2      	b.n	800133a <__libc_init_array+0x1e>
 8001354:	080013a4 	.word	0x080013a4
 8001358:	080013a4 	.word	0x080013a4
 800135c:	080013a4 	.word	0x080013a4
 8001360:	080013a8 	.word	0x080013a8

08001364 <memset>:
 8001364:	4402      	add	r2, r0
 8001366:	4603      	mov	r3, r0
 8001368:	4293      	cmp	r3, r2
 800136a:	d100      	bne.n	800136e <memset+0xa>
 800136c:	4770      	bx	lr
 800136e:	f803 1b01 	strb.w	r1, [r3], #1
 8001372:	e7f9      	b.n	8001368 <memset+0x4>

08001374 <_init>:
 8001374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001376:	bf00      	nop
 8001378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137a:	bc08      	pop	{r3}
 800137c:	469e      	mov	lr, r3
 800137e:	4770      	bx	lr

08001380 <_fini>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr
