
F401_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a9c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c30  08001c30  00011c30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000070  2000000c  08001c5c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000007c  08001c5c  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005522  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012e4  00000000  00000000  0002555e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015a1  00000000  00000000  00026842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000420  00000000  00000000  00027de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000560  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000021e3  00000000  00000000  00028768  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001bb7  00000000  00000000  0002a94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002c502  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000af8  00000000  00000000  0002c580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001c18 	.word	0x08001c18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001c18 	.word	0x08001c18

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000312:	f1a4 0401 	sub.w	r4, r4, #1
 8000316:	d1e9      	bne.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f092 0f00 	teq	r2, #0
 80004be:	bf14      	ite	ne
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e720      	b.n	8000318 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aedc 	beq.w	80002c6 <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6c1      	b.n	80002c6 <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2f>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000970:	bf24      	itt	cs
 8000972:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000976:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097a:	d90d      	bls.n	8000998 <__aeabi_d2f+0x30>
 800097c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000980:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000984:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000988:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800098c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000990:	bf08      	it	eq
 8000992:	f020 0001 	biceq.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800099c:	d121      	bne.n	80009e2 <__aeabi_d2f+0x7a>
 800099e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a2:	bfbc      	itt	lt
 80009a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	4770      	bxlt	lr
 80009aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b2:	f1c2 0218 	rsb	r2, r2, #24
 80009b6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80009be:	fa20 f002 	lsr.w	r0, r0, r2
 80009c2:	bf18      	it	ne
 80009c4:	f040 0001 	orrne.w	r0, r0, #1
 80009c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d4:	ea40 000c 	orr.w	r0, r0, ip
 80009d8:	fa23 f302 	lsr.w	r3, r3, r2
 80009dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e0:	e7cc      	b.n	800097c <__aeabi_d2f+0x14>
 80009e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e6:	d107      	bne.n	80009f8 <__aeabi_d2f+0x90>
 80009e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009ec:	bf1e      	ittt	ne
 80009ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f6:	4770      	bxne	lr
 80009f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_uldivmod>:
 8000a08:	b953      	cbnz	r3, 8000a20 <__aeabi_uldivmod+0x18>
 8000a0a:	b94a      	cbnz	r2, 8000a20 <__aeabi_uldivmod+0x18>
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	bf08      	it	eq
 8000a10:	2800      	cmpeq	r0, #0
 8000a12:	bf1c      	itt	ne
 8000a14:	f04f 31ff 	movne.w	r1, #4294967295
 8000a18:	f04f 30ff 	movne.w	r0, #4294967295
 8000a1c:	f000 b97a 	b.w	8000d14 <__aeabi_idiv0>
 8000a20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a28:	f000 f806 	bl	8000a38 <__udivmoddi4>
 8000a2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a34:	b004      	add	sp, #16
 8000a36:	4770      	bx	lr

08000a38 <__udivmoddi4>:
 8000a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	460d      	mov	r5, r1
 8000a40:	4604      	mov	r4, r0
 8000a42:	9e08      	ldr	r6, [sp, #32]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d151      	bne.n	8000aec <__udivmoddi4+0xb4>
 8000a48:	428a      	cmp	r2, r1
 8000a4a:	4617      	mov	r7, r2
 8000a4c:	d96d      	bls.n	8000b2a <__udivmoddi4+0xf2>
 8000a4e:	fab2 fe82 	clz	lr, r2
 8000a52:	f1be 0f00 	cmp.w	lr, #0
 8000a56:	d00b      	beq.n	8000a70 <__udivmoddi4+0x38>
 8000a58:	f1ce 0c20 	rsb	ip, lr, #32
 8000a5c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a60:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a64:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a68:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a6c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a70:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a74:	0c25      	lsrs	r5, r4, #16
 8000a76:	fbbc f8fa 	udiv	r8, ip, sl
 8000a7a:	fa1f f987 	uxth.w	r9, r7
 8000a7e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a82:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a86:	fb08 f309 	mul.w	r3, r8, r9
 8000a8a:	42ab      	cmp	r3, r5
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x6c>
 8000a8e:	19ed      	adds	r5, r5, r7
 8000a90:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a94:	f080 8123 	bcs.w	8000cde <__udivmoddi4+0x2a6>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	f240 8120 	bls.w	8000cde <__udivmoddi4+0x2a6>
 8000a9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000aa2:	443d      	add	r5, r7
 8000aa4:	1aed      	subs	r5, r5, r3
 8000aa6:	b2a4      	uxth	r4, r4
 8000aa8:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aac:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ab0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab4:	fb00 f909 	mul.w	r9, r0, r9
 8000ab8:	45a1      	cmp	r9, r4
 8000aba:	d909      	bls.n	8000ad0 <__udivmoddi4+0x98>
 8000abc:	19e4      	adds	r4, r4, r7
 8000abe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac2:	f080 810a 	bcs.w	8000cda <__udivmoddi4+0x2a2>
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	f240 8107 	bls.w	8000cda <__udivmoddi4+0x2a2>
 8000acc:	3802      	subs	r0, #2
 8000ace:	443c      	add	r4, r7
 8000ad0:	eba4 0409 	sub.w	r4, r4, r9
 8000ad4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d061      	beq.n	8000ba2 <__udivmoddi4+0x16a>
 8000ade:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	6034      	str	r4, [r6, #0]
 8000ae6:	6073      	str	r3, [r6, #4]
 8000ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aec:	428b      	cmp	r3, r1
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0xc8>
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d054      	beq.n	8000b9e <__udivmoddi4+0x166>
 8000af4:	2100      	movs	r1, #0
 8000af6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000afa:	4608      	mov	r0, r1
 8000afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b00:	fab3 f183 	clz	r1, r3
 8000b04:	2900      	cmp	r1, #0
 8000b06:	f040 808e 	bne.w	8000c26 <__udivmoddi4+0x1ee>
 8000b0a:	42ab      	cmp	r3, r5
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0xdc>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80fa 	bhi.w	8000d08 <__udivmoddi4+0x2d0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb65 0503 	sbc.w	r5, r5, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	46ac      	mov	ip, r5
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	d03f      	beq.n	8000ba2 <__udivmoddi4+0x16a>
 8000b22:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	b912      	cbnz	r2, 8000b32 <__udivmoddi4+0xfa>
 8000b2c:	2701      	movs	r7, #1
 8000b2e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b32:	fab7 fe87 	clz	lr, r7
 8000b36:	f1be 0f00 	cmp.w	lr, #0
 8000b3a:	d134      	bne.n	8000ba6 <__udivmoddi4+0x16e>
 8000b3c:	1beb      	subs	r3, r5, r7
 8000b3e:	0c3a      	lsrs	r2, r7, #16
 8000b40:	fa1f fc87 	uxth.w	ip, r7
 8000b44:	2101      	movs	r1, #1
 8000b46:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b4a:	0c25      	lsrs	r5, r4, #16
 8000b4c:	fb02 3318 	mls	r3, r2, r8, r3
 8000b50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b54:	fb0c f308 	mul.w	r3, ip, r8
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0x134>
 8000b5c:	19ed      	adds	r5, r5, r7
 8000b5e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b62:	d202      	bcs.n	8000b6a <__udivmoddi4+0x132>
 8000b64:	42ab      	cmp	r3, r5
 8000b66:	f200 80d1 	bhi.w	8000d0c <__udivmoddi4+0x2d4>
 8000b6a:	4680      	mov	r8, r0
 8000b6c:	1aed      	subs	r5, r5, r3
 8000b6e:	b2a3      	uxth	r3, r4
 8000b70:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b74:	fb02 5510 	mls	r5, r2, r0, r5
 8000b78:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b7c:	fb0c fc00 	mul.w	ip, ip, r0
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d907      	bls.n	8000b94 <__udivmoddi4+0x15c>
 8000b84:	19e4      	adds	r4, r4, r7
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	d202      	bcs.n	8000b92 <__udivmoddi4+0x15a>
 8000b8c:	45a4      	cmp	ip, r4
 8000b8e:	f200 80b8 	bhi.w	8000d02 <__udivmoddi4+0x2ca>
 8000b92:	4618      	mov	r0, r3
 8000b94:	eba4 040c 	sub.w	r4, r4, ip
 8000b98:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b9c:	e79d      	b.n	8000ada <__udivmoddi4+0xa2>
 8000b9e:	4631      	mov	r1, r6
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	f1ce 0420 	rsb	r4, lr, #32
 8000baa:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bae:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bb2:	fa20 f804 	lsr.w	r8, r0, r4
 8000bb6:	0c3a      	lsrs	r2, r7, #16
 8000bb8:	fa25 f404 	lsr.w	r4, r5, r4
 8000bbc:	ea48 0803 	orr.w	r8, r8, r3
 8000bc0:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bc4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bc8:	fb02 4411 	mls	r4, r2, r1, r4
 8000bcc:	fa1f fc87 	uxth.w	ip, r7
 8000bd0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bd4:	fb01 f30c 	mul.w	r3, r1, ip
 8000bd8:	42ab      	cmp	r3, r5
 8000bda:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x1bc>
 8000be0:	19ed      	adds	r5, r5, r7
 8000be2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be6:	f080 808a 	bcs.w	8000cfe <__udivmoddi4+0x2c6>
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	f240 8087 	bls.w	8000cfe <__udivmoddi4+0x2c6>
 8000bf0:	3902      	subs	r1, #2
 8000bf2:	443d      	add	r5, r7
 8000bf4:	1aeb      	subs	r3, r5, r3
 8000bf6:	fa1f f588 	uxth.w	r5, r8
 8000bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bfe:	fb02 3310 	mls	r3, r2, r0, r3
 8000c02:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c06:	fb00 f30c 	mul.w	r3, r0, ip
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x1e6>
 8000c0e:	19ed      	adds	r5, r5, r7
 8000c10:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c14:	d26f      	bcs.n	8000cf6 <__udivmoddi4+0x2be>
 8000c16:	42ab      	cmp	r3, r5
 8000c18:	d96d      	bls.n	8000cf6 <__udivmoddi4+0x2be>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	443d      	add	r5, r7
 8000c1e:	1aeb      	subs	r3, r5, r3
 8000c20:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c24:	e78f      	b.n	8000b46 <__udivmoddi4+0x10e>
 8000c26:	f1c1 0720 	rsb	r7, r1, #32
 8000c2a:	fa22 f807 	lsr.w	r8, r2, r7
 8000c2e:	408b      	lsls	r3, r1
 8000c30:	fa05 f401 	lsl.w	r4, r5, r1
 8000c34:	ea48 0303 	orr.w	r3, r8, r3
 8000c38:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c3c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c40:	40fd      	lsrs	r5, r7
 8000c42:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c46:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c4a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c4e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c52:	fa1f f883 	uxth.w	r8, r3
 8000c56:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c5a:	fb09 f408 	mul.w	r4, r9, r8
 8000c5e:	42ac      	cmp	r4, r5
 8000c60:	fa02 f201 	lsl.w	r2, r2, r1
 8000c64:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x244>
 8000c6a:	18ed      	adds	r5, r5, r3
 8000c6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c70:	d243      	bcs.n	8000cfa <__udivmoddi4+0x2c2>
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	d941      	bls.n	8000cfa <__udivmoddi4+0x2c2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	441d      	add	r5, r3
 8000c7c:	1b2d      	subs	r5, r5, r4
 8000c7e:	fa1f fe8e 	uxth.w	lr, lr
 8000c82:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c86:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c8a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c8e:	fb00 f808 	mul.w	r8, r0, r8
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x26e>
 8000c96:	18e4      	adds	r4, r4, r3
 8000c98:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c9c:	d229      	bcs.n	8000cf2 <__udivmoddi4+0x2ba>
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d927      	bls.n	8000cf2 <__udivmoddi4+0x2ba>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	441c      	add	r4, r3
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	eba4 0408 	sub.w	r4, r4, r8
 8000cae:	fba0 8902 	umull	r8, r9, r0, r2
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c6      	mov	lr, r8
 8000cb6:	464d      	mov	r5, r9
 8000cb8:	d315      	bcc.n	8000ce6 <__udivmoddi4+0x2ae>
 8000cba:	d012      	beq.n	8000ce2 <__udivmoddi4+0x2aa>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x29c>
 8000cbe:	ebba 030e 	subs.w	r3, sl, lr
 8000cc2:	eb64 0405 	sbc.w	r4, r4, r5
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431f      	orrs	r7, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	6037      	str	r7, [r6, #0]
 8000cd2:	6074      	str	r4, [r6, #4]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	e6f8      	b.n	8000ad0 <__udivmoddi4+0x98>
 8000cde:	4690      	mov	r8, r2
 8000ce0:	e6e0      	b.n	8000aa4 <__udivmoddi4+0x6c>
 8000ce2:	45c2      	cmp	sl, r8
 8000ce4:	d2ea      	bcs.n	8000cbc <__udivmoddi4+0x284>
 8000ce6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cea:	eb69 0503 	sbc.w	r5, r9, r3
 8000cee:	3801      	subs	r0, #1
 8000cf0:	e7e4      	b.n	8000cbc <__udivmoddi4+0x284>
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	e7d7      	b.n	8000ca6 <__udivmoddi4+0x26e>
 8000cf6:	4640      	mov	r0, r8
 8000cf8:	e791      	b.n	8000c1e <__udivmoddi4+0x1e6>
 8000cfa:	4681      	mov	r9, r0
 8000cfc:	e7be      	b.n	8000c7c <__udivmoddi4+0x244>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	e778      	b.n	8000bf4 <__udivmoddi4+0x1bc>
 8000d02:	3802      	subs	r0, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	e745      	b.n	8000b94 <__udivmoddi4+0x15c>
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xe6>
 8000d0c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d10:	443d      	add	r5, r7
 8000d12:	e72b      	b.n	8000b6c <__udivmoddi4+0x134>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_InitTick+0x3c>)
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_InitTick+0x40>)
{
 8000d1e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	7818      	ldrb	r0, [r3, #0]
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d2a:	6810      	ldr	r0, [r2, #0]
 8000d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d30:	f000 fa96 	bl	8001260 <HAL_SYSTICK_Config>
 8000d34:	4604      	mov	r4, r0
 8000d36:	b958      	cbnz	r0, 8000d50 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	2d0f      	cmp	r5, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4629      	mov	r1, r5
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 fa58 	bl	80011f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_InitTick+0x44>)
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	601d      	str	r5, [r3, #0]
 8000d4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_Init>:
{
 8000d60:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x30>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 fa29 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f7ff ffc8 	bl	8000d18 <HAL_InitTick>
  HAL_MspInit();
 8000d88:	f000 fe72 	bl	8001a70 <HAL_MspInit>
}
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	bd08      	pop	{r3, pc}
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <HAL_IncTick+0x10>)
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <HAL_IncTick+0x14>)
 8000d98:	6811      	ldr	r1, [r2, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000028 	.word	0x20000028
 8000da8:	20000000 	.word	0x20000000

08000dac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <HAL_GetTick+0x8>)
 8000dae:	6818      	ldr	r0, [r3, #0]
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000028 	.word	0x20000028

08000db8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dba:	4604      	mov	r4, r0
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	f000 809b 	beq.w	8000ef8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dc2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000dc4:	b925      	cbnz	r5, 8000dd0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc6:	f000 fe6f 	bl	8001aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dcc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dd2:	06db      	lsls	r3, r3, #27
 8000dd4:	f100 808e 	bmi.w	8000ef4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dde:	f023 0302 	bic.w	r3, r3, #2
 8000de2:	f043 0302 	orr.w	r3, r3, #2
 8000de6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <HAL_ADC_Init+0x144>)
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000df0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	6861      	ldr	r1, [r4, #4]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dfa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dfc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e0e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e10:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e12:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e16:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e1e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e20:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e2e:	4934      	ldr	r1, [pc, #208]	; (8000f00 <HAL_ADC_Init+0x148>)
 8000e30:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d052      	beq.n	8000edc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e36:	6899      	ldr	r1, [r3, #8]
 8000e38:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e3c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e3e:	6899      	ldr	r1, [r3, #8]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e44:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e52:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e54:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e56:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e58:	f022 0202 	bic.w	r2, r2, #2
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e66:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000e6a:	2a00      	cmp	r2, #0
 8000e6c:	d03e      	beq.n	8000eec <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e6e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	3901      	subs	r1, #1
 8000e84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e88:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e8c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e96:	3901      	subs	r1, #1
 8000e98:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e9e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000ea0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ea4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000eb0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000eb2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000eb4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ebc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ebe:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ec0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000ec4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eca:	f023 0303 	bic.w	r3, r3, #3
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eea:	e7b2      	b.n	8000e52 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef2:	e7c9      	b.n	8000e88 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	e7ed      	b.n	8000ed4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	40012300 	.word	0x40012300
 8000f00:	0f000001 	.word	0x0f000001

08000f04 <HAL_ADC_Start>:
{
 8000f04:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000f0a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d04e      	beq.n	8000fb0 <HAL_ADC_Start+0xac>
 8000f12:	2301      	movs	r3, #1
 8000f14:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	07d1      	lsls	r1, r2, #31
 8000f1e:	d505      	bpl.n	8000f2c <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	07d2      	lsls	r2, r2, #31
 8000f24:	d414      	bmi.n	8000f50 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
}
 8000f28:	b002      	add	sp, #8
 8000f2a:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000f2c:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f2e:	4921      	ldr	r1, [pc, #132]	; (8000fb4 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_ADC_Start+0xb4>)
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8000f3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000f42:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000f44:	9a01      	ldr	r2, [sp, #4]
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d0ea      	beq.n	8000f20 <HAL_ADC_Start+0x1c>
      counter--;
 8000f4a:	9a01      	ldr	r2, [sp, #4]
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	e7f8      	b.n	8000f42 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f50:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f56:	f022 0201 	bic.w	r2, r2, #1
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f64:	bf41      	itttt	mi
 8000f66:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000f68:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f6c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f70:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f78:	bf1c      	itt	ne
 8000f7a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000f7c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f88:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f8c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_ADC_Start+0xb8>)
 8000f90:	6852      	ldr	r2, [r2, #4]
 8000f92:	06d2      	lsls	r2, r2, #27
 8000f94:	d108      	bne.n	8000fa8 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f9c:	d1c3      	bne.n	8000f26 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	e7bf      	b.n	8000f28 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_ADC_Start+0xbc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d1bb      	bne.n	8000f26 <HAL_ADC_Start+0x22>
 8000fae:	e7f2      	b.n	8000f96 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	e7b9      	b.n	8000f28 <HAL_ADC_Start+0x24>
 8000fb4:	000f4240 	.word	0x000f4240
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	40012300 	.word	0x40012300
 8000fc0:	40012000 	.word	0x40012000

08000fc4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000fc4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d017      	beq.n	8000ffc <HAL_ADC_Stop+0x38>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8000fd2:	6803      	ldr	r3, [r0, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	07db      	lsls	r3, r3, #31
 8000fe0:	d407      	bmi.n	8000ff2 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000ffc:	2002      	movs	r0, #2
}
 8000ffe:	4770      	bx	lr

08001000 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001000:	6803      	ldr	r3, [r0, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
{
 8001004:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001006:	0556      	lsls	r6, r2, #21
{
 8001008:	4604      	mov	r4, r0
 800100a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800100c:	d50b      	bpl.n	8001026 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800100e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001010:	05d8      	lsls	r0, r3, #23
 8001012:	d508      	bpl.n	8001026 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001014:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001016:	f043 0320 	orr.w	r3, r3, #32
 800101a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 800101c:	2300      	movs	r3, #0
 800101e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8001022:	2001      	movs	r0, #1
 8001024:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8001026:	f7ff fec1 	bl	8000dac <HAL_GetTick>
 800102a:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	0792      	lsls	r2, r2, #30
 8001032:	d50c      	bpl.n	800104e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001034:	f06f 0212 	mvn.w	r2, #18
 8001038:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800103c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001040:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001048:	d013      	beq.n	8001072 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800104a:	2000      	movs	r0, #0
 800104c:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800104e:	1c69      	adds	r1, r5, #1
 8001050:	d0ed      	beq.n	800102e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001052:	b945      	cbnz	r5, 8001066 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800105c:	2300      	movs	r3, #0
 800105e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
 8001064:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001066:	f7ff fea1 	bl	8000dac <HAL_GetTick>
 800106a:	1b80      	subs	r0, r0, r6
 800106c:	4285      	cmp	r5, r0
 800106e:	d2dd      	bcs.n	800102c <HAL_ADC_PollForConversion+0x2c>
 8001070:	e7f0      	b.n	8001054 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001072:	7e22      	ldrb	r2, [r4, #24]
 8001074:	2a00      	cmp	r2, #0
 8001076:	d1e8      	bne.n	800104a <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800107a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800107e:	d002      	beq.n	8001086 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001080:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001082:	055b      	lsls	r3, r3, #21
 8001084:	d4e1      	bmi.n	800104a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800108c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001090:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001094:	d1d9      	bne.n	800104a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800109e:	bd70      	pop	{r4, r5, r6, pc}

080010a0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_ADC_ConfigChannel>:
{
 80010a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80010ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	f000 8083 	beq.w	80011be <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010b8:	680d      	ldr	r5, [r1, #0]
 80010ba:	6804      	ldr	r4, [r0, #0]
 80010bc:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80010be:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80010c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80010c6:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c8:	d92a      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010ca:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80010ce:	68e7      	ldr	r7, [r4, #12]
 80010d0:	3b1e      	subs	r3, #30
 80010d2:	f04f 0e07 	mov.w	lr, #7
 80010d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80010da:	ea27 070e 	bic.w	r7, r7, lr
 80010de:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010e0:	68e7      	ldr	r7, [r4, #12]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	433b      	orrs	r3, r7
 80010e8:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80010ea:	684a      	ldr	r2, [r1, #4]
 80010ec:	2a06      	cmp	r2, #6
 80010ee:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80010f2:	d825      	bhi.n	8001140 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010f4:	4413      	add	r3, r2
 80010f6:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80010f8:	1f59      	subs	r1, r3, #5
 80010fa:	231f      	movs	r3, #31
 80010fc:	408b      	lsls	r3, r1
 80010fe:	ea27 0303 	bic.w	r3, r7, r3
 8001102:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001104:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001106:	fa06 f101 	lsl.w	r1, r6, r1
 800110a:	4311      	orrs	r1, r2
 800110c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_ADC_ConfigChannel+0x11c>)
 8001110:	429c      	cmp	r4, r3
 8001112:	d034      	beq.n	800117e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001114:	2300      	movs	r3, #0
 8001116:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800111a:	4618      	mov	r0, r3
}
 800111c:	b003      	add	sp, #12
 800111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	6927      	ldr	r7, [r4, #16]
 8001122:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001126:	f04f 0e07 	mov.w	lr, #7
 800112a:	fa0e fe03 	lsl.w	lr, lr, r3
 800112e:	ea27 070e 	bic.w	r7, r7, lr
 8001132:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001134:	6927      	ldr	r7, [r4, #16]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	433b      	orrs	r3, r7
 800113c:	6123      	str	r3, [r4, #16]
 800113e:	e7d4      	b.n	80010ea <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001140:	2a0c      	cmp	r2, #12
 8001142:	d80e      	bhi.n	8001162 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001144:	4413      	add	r3, r2
 8001146:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001148:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800114c:	231f      	movs	r3, #31
 800114e:	4093      	lsls	r3, r2
 8001150:	ea21 0303 	bic.w	r3, r1, r3
 8001154:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001158:	fa06 f202 	lsl.w	r2, r6, r2
 800115c:	431a      	orrs	r2, r3
 800115e:	6322      	str	r2, [r4, #48]	; 0x30
 8001160:	e7d5      	b.n	800110e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001162:	4413      	add	r3, r2
 8001164:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001166:	3b41      	subs	r3, #65	; 0x41
 8001168:	221f      	movs	r2, #31
 800116a:	409a      	lsls	r2, r3
 800116c:	ea21 0202 	bic.w	r2, r1, r2
 8001170:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001174:	fa06 f103 	lsl.w	r1, r6, r3
 8001178:	4311      	orrs	r1, r2
 800117a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800117c:	e7c7      	b.n	800110e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800117e:	2d12      	cmp	r5, #18
 8001180:	d104      	bne.n	800118c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001182:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <HAL_ADC_ConfigChannel+0x120>)
 8001184:	6853      	ldr	r3, [r2, #4]
 8001186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800118a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800118c:	f1a5 0310 	sub.w	r3, r5, #16
 8001190:	2b01      	cmp	r3, #1
 8001192:	d8bf      	bhi.n	8001114 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <HAL_ADC_ConfigChannel+0x120>)
 8001196:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001198:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800119a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011a0:	d1b8      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_ADC_ConfigChannel+0x124>)
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_ADC_ConfigChannel+0x128>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80011ac:	230a      	movs	r3, #10
 80011ae:	4353      	muls	r3, r2
        counter--;
 80011b0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80011b2:	9b01      	ldr	r3, [sp, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0ad      	beq.n	8001114 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80011b8:	9b01      	ldr	r3, [sp, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	e7f8      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80011be:	2002      	movs	r0, #2
 80011c0:	e7ac      	b.n	800111c <HAL_ADC_ConfigChannel+0x74>
 80011c2:	bf00      	nop
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40012300 	.word	0x40012300
 80011cc:	20000008 	.word	0x20000008
 80011d0:	000f4240 	.word	0x000f4240

080011d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80011d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c1b      	lsrs	r3, r3, #16
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	0200      	lsls	r0, r0, #8
 80011e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011f0:	60d3      	str	r3, [r2, #12]
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b530      	push	{r4, r5, lr}
 80011fc:	68dc      	ldr	r4, [r3, #12]
 80011fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001202:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	2b04      	cmp	r3, #4
 800120a:	bf28      	it	cs
 800120c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 0501 	mov.w	r5, #1
 8001214:	fa05 f303 	lsl.w	r3, r5, r3
 8001218:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121c:	bf8c      	ite	hi
 800121e:	3c03      	subhi	r4, #3
 8001220:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001222:	4019      	ands	r1, r3
 8001224:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001226:	fa05 f404 	lsl.w	r4, r5, r4
 800122a:	3c01      	subs	r4, #1
 800122c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800122e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	ea42 0201 	orr.w	r2, r2, r1
 8001234:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	bfad      	iteet	ge
 800123a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	f000 000f 	andlt.w	r0, r0, #15
 8001242:	4b06      	ldrlt	r3, [pc, #24]	; (800125c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	bfb5      	itete	lt
 800124a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001254:	bd30      	pop	{r4, r5, pc}
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	e000ed14 	.word	0xe000ed14

08001260 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	3801      	subs	r0, #1
 8001262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001266:	d20a      	bcs.n	800127e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	21f0      	movs	r1, #240	; 0xf0
 8001270:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001290:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001434 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001298:	4a64      	ldr	r2, [pc, #400]	; (800142c <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800129c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80012a4:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a8:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80012ac:	42b7      	cmp	r7, r6
 80012ae:	f040 80ad 	bne.w	800140c <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	684c      	ldr	r4, [r1, #4]
 80012b4:	f024 0a10 	bic.w	sl, r4, #16
 80012b8:	f1ba 0f02 	cmp.w	sl, #2
 80012bc:	d116      	bne.n	80012ec <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80012be:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80012c2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80012ca:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012d2:	f04f 0e0f 	mov.w	lr, #15
 80012d6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80012da:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012de:	690d      	ldr	r5, [r1, #16]
 80012e0:	fa05 f50b 	lsl.w	r5, r5, fp
 80012e4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80012e8:	f8cc 5020 	str.w	r5, [ip, #32]
 80012ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012f2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	fa05 f50c 	lsl.w	r5, r5, ip
 80012fa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001300:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001304:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130c:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001310:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001314:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001316:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	d815      	bhi.n	8001348 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 800131c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001324:	68cd      	ldr	r5, [r1, #12]
 8001326:	fa05 fa0c 	lsl.w	sl, r5, ip
 800132a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800132e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001332:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001336:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800133a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800133e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001342:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001346:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001348:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	9d00      	ldr	r5, [sp, #0]
 800134c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134e:	688f      	ldr	r7, [r1, #8]
 8001350:	fa07 f70c 	lsl.w	r7, r7, ip
 8001354:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001356:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	00e5      	lsls	r5, r4, #3
 800135a:	d557      	bpl.n	800140c <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135c:	f04f 0b00 	mov.w	fp, #0
 8001360:	f8cd b00c 	str.w	fp, [sp, #12]
 8001364:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001368:	4d31      	ldr	r5, [pc, #196]	; (8001430 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800136e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001372:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001376:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800137a:	9703      	str	r7, [sp, #12]
 800137c:	9f03      	ldr	r7, [sp, #12]
 800137e:	f023 0703 	bic.w	r7, r3, #3
 8001382:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001386:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001392:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001396:	f04f 0e0f 	mov.w	lr, #15
 800139a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a0:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a4:	d039      	beq.n	800141a <HAL_GPIO_Init+0x18e>
 80013a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013aa:	42a8      	cmp	r0, r5
 80013ac:	d037      	beq.n	800141e <HAL_GPIO_Init+0x192>
 80013ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013b2:	42a8      	cmp	r0, r5
 80013b4:	d035      	beq.n	8001422 <HAL_GPIO_Init+0x196>
 80013b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ba:	42a8      	cmp	r0, r5
 80013bc:	d033      	beq.n	8001426 <HAL_GPIO_Init+0x19a>
 80013be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013c2:	42a8      	cmp	r0, r5
 80013c4:	bf14      	ite	ne
 80013c6:	2507      	movne	r5, #7
 80013c8:	2504      	moveq	r5, #4
 80013ca:	fa05 f50c 	lsl.w	r5, r5, ip
 80013ce:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013d4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013dc:	bf0c      	ite	eq
 80013de:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013e0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013e2:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013e4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013ea:	bf0c      	ite	eq
 80013ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013ee:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013f0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013f8:	bf0c      	ite	eq
 80013fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013fc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80013fe:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001400:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001402:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001404:	bf54      	ite	pl
 8001406:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001408:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800140a:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140c:	3301      	adds	r3, #1
 800140e:	2b10      	cmp	r3, #16
 8001410:	f47f af47 	bne.w	80012a2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001414:	b005      	add	sp, #20
 8001416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141a:	465d      	mov	r5, fp
 800141c:	e7d5      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 800141e:	2501      	movs	r5, #1
 8001420:	e7d3      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 8001422:	2502      	movs	r5, #2
 8001424:	e7d1      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 8001426:	2503      	movs	r5, #3
 8001428:	e7cf      	b.n	80013ca <HAL_GPIO_Init+0x13e>
 800142a:	bf00      	nop
 800142c:	40013c00 	.word	0x40013c00
 8001430:	40020000 	.word	0x40020000
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	4604      	mov	r4, r0
 800143e:	b918      	cbnz	r0, 8001448 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001442:	b002      	add	sp, #8
 8001444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001448:	6803      	ldr	r3, [r0, #0]
 800144a:	07dd      	lsls	r5, r3, #31
 800144c:	d410      	bmi.n	8001470 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	0798      	lsls	r0, r3, #30
 8001452:	d458      	bmi.n	8001506 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	071a      	lsls	r2, r3, #28
 8001458:	f100 809a 	bmi.w	8001590 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	075b      	lsls	r3, r3, #29
 8001460:	f100 80b8 	bmi.w	80015d4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001464:	69a2      	ldr	r2, [r4, #24]
 8001466:	2a00      	cmp	r2, #0
 8001468:	f040 8119 	bne.w	800169e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
 800146e:	e7e8      	b.n	8001442 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001470:	4ba6      	ldr	r3, [pc, #664]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	f002 020c 	and.w	r2, r2, #12
 8001478:	2a04      	cmp	r2, #4
 800147a:	d007      	beq.n	800148c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001482:	2a08      	cmp	r2, #8
 8001484:	d10a      	bne.n	800149c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	0259      	lsls	r1, r3, #9
 800148a:	d507      	bpl.n	800149c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	4b9f      	ldr	r3, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	039a      	lsls	r2, r3, #14
 8001492:	d5dc      	bpl.n	800144e <HAL_RCC_OscConfig+0x16>
 8001494:	6863      	ldr	r3, [r4, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1d9      	bne.n	800144e <HAL_RCC_OscConfig+0x16>
 800149a:	e7d1      	b.n	8001440 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	6863      	ldr	r3, [r4, #4]
 800149e:	4d9b      	ldr	r5, [pc, #620]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d111      	bne.n	80014ca <HAL_RCC_OscConfig+0x92>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc7d 	bl	8000dac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	4d96      	ldr	r5, [pc, #600]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80014b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	039b      	lsls	r3, r3, #14
 80014ba:	d4c8      	bmi.n	800144e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fc76 	bl	8000dac <HAL_GetTick>
 80014c0:	1b80      	subs	r0, r0, r6
 80014c2:	2864      	cmp	r0, #100	; 0x64
 80014c4:	d9f7      	bls.n	80014b6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80014c6:	2003      	movs	r0, #3
 80014c8:	e7bb      	b.n	8001442 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ce:	d104      	bne.n	80014da <HAL_RCC_OscConfig+0xa2>
 80014d0:	682b      	ldr	r3, [r5, #0]
 80014d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	e7e5      	b.n	80014a6 <HAL_RCC_OscConfig+0x6e>
 80014da:	682a      	ldr	r2, [r5, #0]
 80014dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014e0:	602a      	str	r2, [r5, #0]
 80014e2:	682a      	ldr	r2, [r5, #0]
 80014e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014e8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1df      	bne.n	80014ae <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc5d 	bl	8000dac <HAL_GetTick>
 80014f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	039f      	lsls	r7, r3, #14
 80014f8:	d5a9      	bpl.n	800144e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fa:	f7ff fc57 	bl	8000dac <HAL_GetTick>
 80014fe:	1b80      	subs	r0, r0, r6
 8001500:	2864      	cmp	r0, #100	; 0x64
 8001502:	d9f7      	bls.n	80014f4 <HAL_RCC_OscConfig+0xbc>
 8001504:	e7df      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001506:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	f012 0f0c 	tst.w	r2, #12
 800150e:	d007      	beq.n	8001520 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001516:	2a08      	cmp	r2, #8
 8001518:	d111      	bne.n	800153e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	025e      	lsls	r6, r3, #9
 800151e:	d40e      	bmi.n	800153e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001520:	4b7a      	ldr	r3, [pc, #488]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	0795      	lsls	r5, r2, #30
 8001526:	d502      	bpl.n	800152e <HAL_RCC_OscConfig+0xf6>
 8001528:	68e2      	ldr	r2, [r4, #12]
 800152a:	2a01      	cmp	r2, #1
 800152c:	d188      	bne.n	8001440 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6921      	ldr	r1, [r4, #16]
 8001532:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001536:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800153a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153c:	e78a      	b.n	8001454 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800153e:	68e2      	ldr	r2, [r4, #12]
 8001540:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x2d8>)
 8001542:	b1b2      	cbz	r2, 8001572 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001548:	f7ff fc30 	bl	8000dac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4d6f      	ldr	r5, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800154e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	0798      	lsls	r0, r3, #30
 8001554:	d507      	bpl.n	8001566 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	6922      	ldr	r2, [r4, #16]
 800155a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800155e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001562:	602b      	str	r3, [r5, #0]
 8001564:	e776      	b.n	8001454 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fc21 	bl	8000dac <HAL_GetTick>
 800156a:	1b80      	subs	r0, r0, r6
 800156c:	2802      	cmp	r0, #2
 800156e:	d9ef      	bls.n	8001550 <HAL_RCC_OscConfig+0x118>
 8001570:	e7a9      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001572:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001574:	f7ff fc1a 	bl	8000dac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001578:	4d64      	ldr	r5, [pc, #400]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800157a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157c:	682b      	ldr	r3, [r5, #0]
 800157e:	0799      	lsls	r1, r3, #30
 8001580:	f57f af68 	bpl.w	8001454 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc12 	bl	8000dac <HAL_GetTick>
 8001588:	1b80      	subs	r0, r0, r6
 800158a:	2802      	cmp	r0, #2
 800158c:	d9f6      	bls.n	800157c <HAL_RCC_OscConfig+0x144>
 800158e:	e79a      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001590:	6962      	ldr	r2, [r4, #20]
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x2dc>)
 8001594:	b17a      	cbz	r2, 80015b6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800159a:	f7ff fc07 	bl	8000dac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4d5b      	ldr	r5, [pc, #364]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80015a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015a4:	079f      	lsls	r7, r3, #30
 80015a6:	f53f af59 	bmi.w	800145c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fbff 	bl	8000dac <HAL_GetTick>
 80015ae:	1b80      	subs	r0, r0, r6
 80015b0:	2802      	cmp	r0, #2
 80015b2:	d9f6      	bls.n	80015a2 <HAL_RCC_OscConfig+0x16a>
 80015b4:	e787      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80015b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbf8 	bl	8000dac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4d53      	ldr	r5, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80015be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015c2:	0798      	lsls	r0, r3, #30
 80015c4:	f57f af4a 	bpl.w	800145c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fbf0 	bl	8000dac <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	2802      	cmp	r0, #2
 80015d0:	d9f6      	bls.n	80015c0 <HAL_RCC_OscConfig+0x188>
 80015d2:	e778      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015dc:	d128      	bne.n	8001630 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015f2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	4d48      	ldr	r5, [pc, #288]	; (8001718 <HAL_RCC_OscConfig+0x2e0>)
 80015f6:	682b      	ldr	r3, [r5, #0]
 80015f8:	05d9      	lsls	r1, r3, #23
 80015fa:	d51b      	bpl.n	8001634 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	68a3      	ldr	r3, [r4, #8]
 80015fe:	4d43      	ldr	r5, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 8001600:	2b01      	cmp	r3, #1
 8001602:	d127      	bne.n	8001654 <HAL_RCC_OscConfig+0x21c>
 8001604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800160c:	f7ff fbce 	bl	8000dac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001610:	4d3e      	ldr	r5, [pc, #248]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001612:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800161a:	079b      	lsls	r3, r3, #30
 800161c:	d539      	bpl.n	8001692 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800161e:	2e00      	cmp	r6, #0
 8001620:	f43f af20 	beq.w	8001464 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4a39      	ldr	r2, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 8001626:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	e719      	b.n	8001464 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001630:	2600      	movs	r6, #0
 8001632:	e7df      	b.n	80015f4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800163c:	f7ff fbb6 	bl	8000dac <HAL_GetTick>
 8001640:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	05da      	lsls	r2, r3, #23
 8001646:	d4d9      	bmi.n	80015fc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001648:	f7ff fbb0 	bl	8000dac <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	2802      	cmp	r0, #2
 8001650:	d9f7      	bls.n	8001642 <HAL_RCC_OscConfig+0x20a>
 8001652:	e738      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001654:	2b05      	cmp	r3, #5
 8001656:	d104      	bne.n	8001662 <HAL_RCC_OscConfig+0x22a>
 8001658:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	672b      	str	r3, [r5, #112]	; 0x70
 8001660:	e7d0      	b.n	8001604 <HAL_RCC_OscConfig+0x1cc>
 8001662:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	672a      	str	r2, [r5, #112]	; 0x70
 800166a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800166c:	f022 0204 	bic.w	r2, r2, #4
 8001670:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ca      	bne.n	800160c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001676:	f7ff fb99 	bl	8000dac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800167e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001682:	0798      	lsls	r0, r3, #30
 8001684:	d5cb      	bpl.n	800161e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb91 	bl	8000dac <HAL_GetTick>
 800168a:	1bc0      	subs	r0, r0, r7
 800168c:	4540      	cmp	r0, r8
 800168e:	d9f7      	bls.n	8001680 <HAL_RCC_OscConfig+0x248>
 8001690:	e719      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fb8b 	bl	8000dac <HAL_GetTick>
 8001696:	1bc0      	subs	r0, r0, r7
 8001698:	4540      	cmp	r0, r8
 800169a:	d9bd      	bls.n	8001618 <HAL_RCC_OscConfig+0x1e0>
 800169c:	e713      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800169e:	4d1b      	ldr	r5, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
 80016a0:	68ab      	ldr	r3, [r5, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	f43f aeca 	beq.w	8001440 <HAL_RCC_OscConfig+0x8>
 80016ac:	4e1b      	ldr	r6, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x2e4>)
 80016ae:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016b2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b4:	d134      	bne.n	8001720 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80016b6:	f7ff fb79 	bl	8000dac <HAL_GetTick>
 80016ba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	0199      	lsls	r1, r3, #6
 80016c0:	d41e      	bmi.n	8001700 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c2:	6a22      	ldr	r2, [r4, #32]
 80016c4:	69e3      	ldr	r3, [r4, #28]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4c0d      	ldr	r4, [pc, #52]	; (800170c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d8:	0852      	lsrs	r2, r2, #1
 80016da:	3a01      	subs	r2, #1
 80016dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80016e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016e2:	2301      	movs	r3, #1
 80016e4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80016e6:	f7ff fb61 	bl	8000dac <HAL_GetTick>
 80016ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	019a      	lsls	r2, r3, #6
 80016f0:	f53f aebc 	bmi.w	800146c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fb5a 	bl	8000dac <HAL_GetTick>
 80016f8:	1b40      	subs	r0, r0, r5
 80016fa:	2802      	cmp	r0, #2
 80016fc:	d9f6      	bls.n	80016ec <HAL_RCC_OscConfig+0x2b4>
 80016fe:	e6e2      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb54 	bl	8000dac <HAL_GetTick>
 8001704:	1bc0      	subs	r0, r0, r7
 8001706:	2802      	cmp	r0, #2
 8001708:	d9d8      	bls.n	80016bc <HAL_RCC_OscConfig+0x284>
 800170a:	e6dc      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001720:	f7ff fb44 	bl	8000dac <HAL_GetTick>
 8001724:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	f57f ae9f 	bpl.w	800146c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fb3d 	bl	8000dac <HAL_GetTick>
 8001732:	1b00      	subs	r0, r0, r4
 8001734:	2802      	cmp	r0, #2
 8001736:	d9f6      	bls.n	8001726 <HAL_RCC_OscConfig+0x2ee>
 8001738:	e6c5      	b.n	80014c6 <HAL_RCC_OscConfig+0x8e>
 800173a:	bf00      	nop

0800173c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800173c:	4913      	ldr	r1, [pc, #76]	; (800178c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800173e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001740:	688b      	ldr	r3, [r1, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x16>
 800174a:	2b08      	cmp	r3, #8
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001750:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_RCC_GetSysClockFreq+0x58>)
 8001754:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001756:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001758:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800175c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001760:	bf14      	ite	ne
 8001762:	480c      	ldrne	r0, [pc, #48]	; (8001794 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	480a      	ldreq	r0, [pc, #40]	; (8001790 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001766:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800176a:	bf18      	it	ne
 800176c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	fba1 0100 	umull	r0, r1, r1, r0
 8001776:	f7ff f947 	bl	8000a08 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_RCC_GetSysClockFreq+0x50>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001786:	fbb0 f0f3 	udiv	r0, r0, r3
 800178a:	bd08      	pop	{r3, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	00f42400 	.word	0x00f42400
 8001794:	017d7840 	.word	0x017d7840

08001798 <HAL_RCC_ClockConfig>:
{
 8001798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800179e:	4604      	mov	r4, r0
 80017a0:	b910      	cbnz	r0, 80017a8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80017a2:	2001      	movs	r0, #1
 80017a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_ClockConfig+0x124>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	f002 020f 	and.w	r2, r2, #15
 80017b0:	428a      	cmp	r2, r1
 80017b2:	d328      	bcc.n	8001806 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	6821      	ldr	r1, [r4, #0]
 80017b6:	078f      	lsls	r7, r1, #30
 80017b8:	d42d      	bmi.n	8001816 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	07c8      	lsls	r0, r1, #31
 80017bc:	d440      	bmi.n	8001840 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_ClockConfig+0x124>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f002 020f 	and.w	r2, r2, #15
 80017c6:	4295      	cmp	r5, r2
 80017c8:	d366      	bcc.n	8001898 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ca:	6822      	ldr	r2, [r4, #0]
 80017cc:	0751      	lsls	r1, r2, #29
 80017ce:	d46c      	bmi.n	80018aa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d0:	0713      	lsls	r3, r2, #28
 80017d2:	d507      	bpl.n	80017e4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d4:	4a3a      	ldr	r2, [pc, #232]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
 80017d6:	6921      	ldr	r1, [r4, #16]
 80017d8:	6893      	ldr	r3, [r2, #8]
 80017da:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017e2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e4:	f7ff ffaa 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
 80017ea:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <HAL_RCC_ClockConfig+0x12c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017f2:	5cd3      	ldrb	r3, [r2, r3]
 80017f4:	40d8      	lsrs	r0, r3
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_RCC_ClockConfig+0x130>)
 80017f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff fa8c 	bl	8000d18 <HAL_InitTick>
  return HAL_OK;
 8001800:	2000      	movs	r0, #0
 8001802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	4299      	cmp	r1, r3
 8001812:	d1c6      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xa>
 8001814:	e7ce      	b.n	80017b4 <HAL_RCC_ClockConfig+0x1c>
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001818:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	bf1e      	ittt	ne
 800181e:	689a      	ldrne	r2, [r3, #8]
 8001820:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001824:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	bf42      	ittt	mi
 800182a:	689a      	ldrmi	r2, [r3, #8]
 800182c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001830:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68a0      	ldr	r0, [r4, #8]
 8001836:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800183a:	4302      	orrs	r2, r0
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e7bc      	b.n	80017ba <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001840:	6862      	ldr	r2, [r4, #4]
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
 8001844:	2a01      	cmp	r2, #1
 8001846:	d11d      	bne.n	8001884 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	d0a8      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001850:	4e1b      	ldr	r6, [pc, #108]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
 8001852:	68b3      	ldr	r3, [r6, #8]
 8001854:	f023 0303 	bic.w	r3, r3, #3
 8001858:	4313      	orrs	r3, r2
 800185a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800185c:	f7ff faa6 	bl	8000dac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001860:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001864:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	68b3      	ldr	r3, [r6, #8]
 8001868:	6862      	ldr	r2, [r4, #4]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001872:	d0a4      	beq.n	80017be <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa9a 	bl	8000dac <HAL_GetTick>
 8001878:	1bc0      	subs	r0, r0, r7
 800187a:	4540      	cmp	r0, r8
 800187c:	d9f3      	bls.n	8001866 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800187e:	2003      	movs	r0, #3
}
 8001880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001884:	1e91      	subs	r1, r2, #2
 8001886:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188a:	d802      	bhi.n	8001892 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001890:	e7dd      	b.n	800184e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	f013 0f02 	tst.w	r3, #2
 8001896:	e7da      	b.n	800184e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001898:	b2ea      	uxtb	r2, r5
 800189a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	429d      	cmp	r5, r3
 80018a4:	f47f af7d 	bne.w	80017a2 <HAL_RCC_ClockConfig+0xa>
 80018a8:	e78f      	b.n	80017ca <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4905      	ldr	r1, [pc, #20]	; (80018c0 <HAL_RCC_ClockConfig+0x128>)
 80018ac:	68e0      	ldr	r0, [r4, #12]
 80018ae:	688b      	ldr	r3, [r1, #8]
 80018b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018b4:	4303      	orrs	r3, r0
 80018b6:	608b      	str	r3, [r1, #8]
 80018b8:	e78a      	b.n	80017d0 <HAL_RCC_ClockConfig+0x38>
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00
 80018c0:	40023800 	.word	0x40023800
 80018c4:	08001c30 	.word	0x08001c30
 80018c8:	20000008 	.word	0x20000008

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b530      	push	{r4, r5, lr}
 80018ce:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d0:	2230      	movs	r2, #48	; 0x30
 80018d2:	2100      	movs	r1, #0
 80018d4:	a808      	add	r0, sp, #32
 80018d6:	f000 f997 	bl	8001c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018da:	2100      	movs	r1, #0
 80018dc:	2214      	movs	r2, #20
 80018de:	a803      	add	r0, sp, #12
 80018e0:	f000 f992 	bl	8001c08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	2500      	movs	r5, #0
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <SystemClock_Config+0x8c>)
 80018e8:	9501      	str	r5, [sp, #4]
 80018ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4a19      	ldr	r2, [pc, #100]	; (800195c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018fe:	9502      	str	r5, [sp, #8]
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190e:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001910:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2310      	movs	r3, #16
 800191e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001920:	2308      	movs	r3, #8
 8001922:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001924:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001926:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001928:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800192c:	2304      	movs	r3, #4
 800192e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001932:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001936:	f7ff fd7f 	bl	8001438 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800193e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001944:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001946:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194c:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800194e:	f7ff ff23 	bl	8001798 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001952:	b015      	add	sp, #84	; 0x54
 8001954:	bd30      	pop	{r4, r5, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <main>:
{
 8001960:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8001962:	f7ff f9fd 	bl	8000d60 <HAL_Init>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2500      	movs	r5, #0
  SystemClock_Config();
 8001968:	f7ff ffb0 	bl	80018cc <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <main+0xe8>)
 800196e:	9501      	str	r5, [sp, #4]
 8001970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hadc1.Instance = ADC1;
 8001972:	4c36      	ldr	r4, [pc, #216]	; (8001a4c <main+0xec>)
	      temp = ((temp - 760.0) / 2.5) + 25;
 8001974:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001a6c <main+0x10c>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	631a      	str	r2, [r3, #48]	; 0x30
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001980:	2710      	movs	r7, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	f003 0301 	and.w	r3, r3, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001986:	463a      	mov	r2, r7
 8001988:	4629      	mov	r1, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 800198c:	a802      	add	r0, sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001990:	f000 f93a 	bl	8001c08 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001994:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <main+0xf0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001996:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.NbrOfConversion = 1;
 800199c:	2601      	movs	r6, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800199e:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019a2:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <main+0xf4>)
 80019a6:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 80019a8:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019aa:	6166      	str	r6, [r4, #20]
  hadc1.Init.ScanConvMode = DISABLE;
 80019ac:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019ae:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b0:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b4:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b6:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019bc:	f7ff f9fc 	bl	8000db8 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c0:	a902      	add	r1, sp, #8
 80019c2:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019c4:	9702      	str	r7, [sp, #8]
  sConfig.Rank = 1;
 80019c6:	9603      	str	r6, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019c8:	9504      	str	r5, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ca:	f7ff fb6d 	bl	80010a8 <HAL_ADC_ConfigChannel>
	      temp = ((temp - 760.0) / 2.5) + 25;
 80019ce:	4f22      	ldr	r7, [pc, #136]	; (8001a58 <main+0xf8>)
 80019d0:	2600      	movs	r6, #0
 80019d2:	f04f 0800 	mov.w	r8, #0
	  	HAL_ADC_Start(&hadc1);
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff fa94 	bl	8000f04 <HAL_ADC_Start>
	    if( HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK )
 80019dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fb0d 	bl	8001000 <HAL_ADC_PollForConversion>
 80019e6:	bb50      	cbnz	r0, 8001a3e <main+0xde>
	      analogValue = HAL_ADC_GetValue(&hadc1);
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fb59 	bl	80010a0 <HAL_ADC_GetValue>
 80019ee:	4d1b      	ldr	r5, [pc, #108]	; (8001a5c <main+0xfc>)
	      temp = ((float)analogValue) / 4095 * 3300;
 80019f0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a60 <main+0x100>
	      analogValue = HAL_ADC_GetValue(&hadc1);
 80019f4:	6028      	str	r0, [r5, #0]
	      temp = ((float)analogValue) / 4095 * 3300;
 80019f6:	ed95 7a00 	vldr	s14, [r5]
 80019fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80019fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a02:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a64 <main+0x104>
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	edcd 7a02 	vstr	s15, [sp, #8]
	      temp = ((temp - 760.0) / 2.5) + 25;
 8001a0e:	9802      	ldr	r0, [sp, #8]
 8001a10:	f7fe fd44 	bl	800049c <__aeabi_f2d>
 8001a14:	4632      	mov	r2, r6
 8001a16:	463b      	mov	r3, r7
 8001a18:	f7fe fbe0 	bl	80001dc <__aeabi_dsub>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	464b      	mov	r3, r9
 8001a20:	f7fe feba 	bl	8000798 <__aeabi_ddiv>
 8001a24:	2200      	movs	r2, #0
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <main+0x108>)
 8001a28:	f7fe fbda 	bl	80001e0 <__adddf3>
 8001a2c:	f7fe ff9c 	bl	8000968 <__aeabi_d2f>
 8001a30:	9002      	str	r0, [sp, #8]
	      analogValue = temp;
 8001a32:	eddd 7a02 	vldr	s15, [sp, #8]
 8001a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3a:	edc5 7a00 	vstr	s15, [r5]
	    HAL_ADC_Stop(&hadc1);
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff fac0 	bl	8000fc4 <HAL_ADC_Stop>
  {
 8001a44:	e7c7      	b.n	80019d6 <main+0x76>
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	20000030 	.word	0x20000030
 8001a50:	40012000 	.word	0x40012000
 8001a54:	0f000001 	.word	0x0f000001
 8001a58:	4087c000 	.word	0x4087c000
 8001a5c:	20000078 	.word	0x20000078
 8001a60:	457ff000 	.word	0x457ff000
 8001a64:	454e4000 	.word	0x454e4000
 8001a68:	40390000 	.word	0x40390000
 8001a6c:	40040000 	.word	0x40040000

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_MspInit+0x34>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a82:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	9101      	str	r1, [sp, #4]
 8001a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	b002      	add	sp, #8
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b510      	push	{r4, lr}
 8001aaa:	4604      	mov	r4, r0
 8001aac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	2214      	movs	r2, #20
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	a803      	add	r0, sp, #12
 8001ab4:	f000 f8a8 	bl	8001c08 <memset>
  if(hadc->Instance==ADC1)
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_ADC_MspInit+0x5c>)
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d11e      	bne.n	8001afe <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	9101      	str	r1, [sp, #4]
 8001ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	480f      	ldr	r0, [pc, #60]	; (8001b08 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ad2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ad4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ad8:	9201      	str	r2, [sp, #4]
 8001ada:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	9102      	str	r1, [sp, #8]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001af0:	2301      	movs	r3, #1
 8001af2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f7ff fbc7 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001afe:	b008      	add	sp, #32
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	bf00      	nop
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40020000 	.word	0x40020000

08001b0c <NMI_Handler>:
 8001b0c:	4770      	bx	lr

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	e7fe      	b.n	8001b0e <HardFault_Handler>

08001b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler>

08001b16 <SVC_Handler>:
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f7ff b93a 	b.w	8000d94 <HAL_IncTick>

08001b20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	490f      	ldr	r1, [pc, #60]	; (8001b60 <SystemInit+0x40>)
 8001b22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <SystemInit+0x44>)
 8001b30:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b32:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b3a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b46:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <SystemInit+0x48>)
 8001b4a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b52:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b54:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	24003010 	.word	0x24003010

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b72:	e003      	b.n	8001b7c <LoopCopyDataInit>

08001b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b7a:	3104      	adds	r1, #4

08001b7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b7c:	480b      	ldr	r0, [pc, #44]	; (8001bac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b84:	d3f6      	bcc.n	8001b74 <CopyDataInit>
  ldr  r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b88:	e002      	b.n	8001b90 <LoopFillZerobss>

08001b8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b8c:	f842 3b04 	str.w	r3, [r2], #4

08001b90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b94:	d3f9      	bcc.n	8001b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b96:	f7ff ffc3 	bl	8001b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f000 f811 	bl	8001bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fedf 	bl	8001960 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ba8:	08001c50 	.word	0x08001c50
  ldr  r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bb0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bb4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bb8:	2000007c 	.word	0x2000007c

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <__libc_init_array>:
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	4e0d      	ldr	r6, [pc, #52]	; (8001bf8 <__libc_init_array+0x38>)
 8001bc4:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <__libc_init_array+0x3c>)
 8001bc6:	1ba4      	subs	r4, r4, r6
 8001bc8:	10a4      	asrs	r4, r4, #2
 8001bca:	2500      	movs	r5, #0
 8001bcc:	42a5      	cmp	r5, r4
 8001bce:	d109      	bne.n	8001be4 <__libc_init_array+0x24>
 8001bd0:	4e0b      	ldr	r6, [pc, #44]	; (8001c00 <__libc_init_array+0x40>)
 8001bd2:	4c0c      	ldr	r4, [pc, #48]	; (8001c04 <__libc_init_array+0x44>)
 8001bd4:	f000 f820 	bl	8001c18 <_init>
 8001bd8:	1ba4      	subs	r4, r4, r6
 8001bda:	10a4      	asrs	r4, r4, #2
 8001bdc:	2500      	movs	r5, #0
 8001bde:	42a5      	cmp	r5, r4
 8001be0:	d105      	bne.n	8001bee <__libc_init_array+0x2e>
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
 8001be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be8:	4798      	blx	r3
 8001bea:	3501      	adds	r5, #1
 8001bec:	e7ee      	b.n	8001bcc <__libc_init_array+0xc>
 8001bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bf2:	4798      	blx	r3
 8001bf4:	3501      	adds	r5, #1
 8001bf6:	e7f2      	b.n	8001bde <__libc_init_array+0x1e>
 8001bf8:	08001c48 	.word	0x08001c48
 8001bfc:	08001c48 	.word	0x08001c48
 8001c00:	08001c48 	.word	0x08001c48
 8001c04:	08001c4c 	.word	0x08001c4c

08001c08 <memset>:
 8001c08:	4402      	add	r2, r0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <memset+0xa>
 8001c10:	4770      	bx	lr
 8001c12:	f803 1b01 	strb.w	r1, [r3], #1
 8001c16:	e7f9      	b.n	8001c0c <memset+0x4>

08001c18 <_init>:
 8001c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1a:	bf00      	nop
 8001c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1e:	bc08      	pop	{r3}
 8001c20:	469e      	mov	lr, r3
 8001c22:	4770      	bx	lr

08001c24 <_fini>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	bf00      	nop
 8001c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2a:	bc08      	pop	{r3}
 8001c2c:	469e      	mov	lr, r3
 8001c2e:	4770      	bx	lr
